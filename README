Jaluino project, http://jaluino.org and http://jaluino.googlecode.com

INTRODUCTION
------------

This project is about building Arduino-like boards, some may even say clones,
based on Microchip PIC microcontrollers and powered by jalv2 and jallib.

If you want to help us, by reporting issues, contributing to new jaluino libraries or shields,
you're very welcome ! Join us to the jaluino group (http://groups.google.com/group/jaluino). 

Jaluino project has two licenses:
  - Creative Common Attribution-Share Alike: license used for schematics and PCBs. See LICENSE.cc
  - BSD: license used for Jaluino libraries and samples. See LICENCE.bsd


INSTALL
-------

Just unzip or untar the archive. There's currently no dedicated installer, everything is launched
from within the archive content.


GETTING STARTED
---------------

This is a quick getting started, a lot more documentation is needed, but for now, here are few 
guidelines to follow, in order to get started with Jaluino.

 1. Build the board
    ~~~~~~~~~~~~~~~
    Fist step is obviously about building the board. Refer to the user guide, 
    chapter "Building Jaluino Medium board".


 2. Test the board
    ~~~~~~~~~~~~~~
    Once the board is built, you'll probably want to test it. Use sample named "jaluino_medium_blink.jal"
    for this purpose. Compile this sample (assuming you're in the archive directory)
    
    Linux:
        ./compiler/jalv2 -s lib samples/jaluino_medium_blink.jal

    Windows:
        compiler\jalv2.exe -s lib samples\jaluino_medium_blink.jal

    This should give the following output:

        jal 2.4l (compiled Aug  7 2009)
        generating p-code
        0 errors, 0 warnings
        388 tokens, 107963 chars; 2305 lines; 4 files
        live variable analysis iterations: 3
        generating PIC code pass 1
        generating PIC code pass 2
        writing result
        Code area: 106 of 32768 used (bytes)
        Data area: 6 of 928 used
        Software stack available: 922 bytes
        Hardware stack depth 1 of 31

    and produce a "jaluino_medium_blink.hex" file, in "samples" directory.

    Program Jaluino with this file, using your favorite programmer. ICSP connector is used for this. 
    Double-check pins and polarity. Rem: Wisp648 programmer can directly be plugged.

    Once programmed, your LED connected to pin RA0 should blink.


 3. Program a bootloader
    ~~~~~~~~~~~~~~~~~~~~

    You can also setup a bootloader on Jaluino. Current version comes with Tiny Bootloader. You'll find 
	ASM and HEX files in "bootloaders/tinybl" directory. Program file named 
	"tinybld18F4550usb_Xtal20MHz_clock48MHz.hex".

    You can then use tinybootloader PC program to upload HEX files. You'll need to plug a serial module
	to the serial connector (double-check pins and polarity). Re-compile "jaluino_medium_blink.jal" sample,
	with appropriate compiler argument (telling it that you'll use a bootloader):

    for this purpose. Compile this sample (assuming you're in the archive directory)
    
    Linux:
        ./compiler/jalv2 -loader18 4 -s lib samples/jaluino_medium_blink.jal

    Windows:
        compiler\jalv2.exe -loader18 4 -s lib samples\jaluino_medium_blink.jal

    You can then use original TinyBootloader GUI (windows only, 
	http://www.etc.ugal.ro/cchiculita/software/picbootloader.htm) or use the command line interface (CLI)
	program that comes with Jaluino as 3rd party program. Unzip "3rdparty/tinybld2036.zip", then use
	appropriate executable whether you're running Windows or Linux:

    Linux:
        chmod +x tinybld2
        ./tinybld2 -p /dev/ttyS0 jaluino_medium_blink.hex

    Windows:
        tinybld2w.exe -p com1 jaluino_medium_blink.hex


    Note: depending on your serial port configuration, you may need to specify a different port, 
	like /dev/ttyUSB0 if using a USB-to-serial converted



 4. What's next ?
    ~~~~~~~~~~~~~

    So you seem to have a fully functional Jaluino board, congratulations ! What now ? Well, you can build 
	shields, like Crumboard shield, which is targetted for development and prototyping, embedding a small
	breadboard, LEDs and push-buttons.

    Refer to the user guide for more. You'll also find a dedicated crumboard sample: "crumboard_blink.jal",
	which blinks both LEDs...

    And don't forget to give feedback :)


  5. "This sounds complicated..."
     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

     Don't worry, we at Jaluino are actively working on making Jaluino more accessible, using an 
	 pre-configured IDE, USB bootloader, etc... This version is very alpha, many improvements need 
	 to be done, for instance, integrating a pre-configured IDE, USB bootloader, etc... But you can 
	 help in many different way ! Whether you're a newbie or a Guru, join us at
	 http://groups.google.com/group/jaluino !
        



Have fun !

The jaluino team.



--

 * Jalv2 is a high-level language for a number of Microchip PIC microcontrollers
        http://casadeyork.com/jalv2

 * Jallib is a set of jalv2 libraries
        http://jallib.googlecode.com

