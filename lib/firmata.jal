-- Title: Firmata v2 library, jalv2/jallib implementation
-- Author: Sebastien Lelong, Copyright (c) 2008..2010, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4n
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library is a jalv2/jallib implementation of Firmata v2.1 protocol.
-- Firmata is a protocol aimed to provide a universal interface to interact with a microcontroller.
-- With Firmata, microcontroller can dynamically controlled from a PC host, using tools like Pure Data,
-- Processing, python libraries, etc...
-- --
-- By defininf special firmata procedure, you can "attach callbacks" to plug your own code reacting
-- on some firmata events. See "firmata_callback_*" procedures.
-- 
-- Sources: 
--   * http://firmata.org
--   * Arduino's Firmata implementation, see http://code.google.com/p/arduino/
--     (lots of code from author Hans-Christoph Steiner, re-implemented the jalv2 way)
--
-- Notes:
--


-- Version numbers for the protocol.  The protocol is still changing, so these
-- version numbers are important.  This number can be queried so that host
-- software can test whether it will be compatible with the currently
-- installed firmware.
const byte FIRMATA_MAJOR_VERSION = 2
const byte FIRMATA_MINOR_VERSION = 1

-- max number of data bytes in non-Sysex messages
const byte FIRMATA_MAX_DATA_BYTES = 32

-- message command bytes (128-255/0x80-0xFF)
--	  send data for a digital pin
const byte FIRMATA_DIGITAL_MESSAGE = 0x90
--	  send data for an analog pin (or PWM)
const byte FIRMATA_ANALOG_MESSAGE = 0xE0
--	  enable analog input by pin #
const byte FIRMATA_REPORT_ANALOG = 0xC0
--	  enable digital input by port pair
const byte FIRMATA_REPORT_DIGITAL = 0xD0
--	  set a pin to INPUT/OUTPUT/PWM/etc
const byte FIRMATA_SET_PIN_MODE = 0xF4
--	  report protocol version
const byte FIRMATA_REPORT_VERSION = 0xF9
--	  reset 
const byte FIRMATA_SYSTEM_RESET = 0xFF
--	  start a MIDI Sysex message
const byte FIRMATA_START_SYSEX = 0xF0
--	  end a MIDI Sysex message
const byte FIRMATA_END_SYSEX = 0xF7

-- extended command set using sysex (0-127/0x00-0x7F)
-- (0x00-0x0F reserved for user-defined command)
--	  set max angle, minPulse, maxPulse, freq
const byte FIRMATA_SERVO_CONFIG = 0x70
--	  a string message with 14-bits per char
const byte FIRMATA_STRING_DATA = 0x71
--	  a bitstream to/from a shift register
const byte FIRMATA_SHIFT_DATA = 0x75
--	  send an I2C read/write request
const byte FIRMATA_I2C_REQUEST = 0x76
--	  config I2C settings such as delay times and power pins
const byte FIRMATA_I2C_CONFIG = 0x78
--	  report name and version of the firmware
const byte FIRMATA_REPORT_FIRMWARE = 0x79
--	  set the poll rate of the main loop
const byte FIRMATA_SAMPLING_INTERVAL = 0x7A
--	  MIDI Reserved for non-realtime messages
const byte FIRMATA_SYSEX_NON_REALTIME = 0x7E
--	  MIDI Reserved for realtime messages
const byte FIRMATA_SYSEX_REALTIME = 0x7F

-- pin modes
--	  input
const byte FIRMATA_INPUT = 0x00
--	  output
const byte FIRMATA_OUTPUT = 0x01
--	  analog pin in analogInput mode
const byte FIRMATA_ANALOG = 0x02
--	  digital pin in PWM output mode
const byte FIRMATA_PWM = 0x03
--	  digital pin in Servo output mode (seb: why since we have PWM ?)
const byte FIRMATA_SERVO = 0x04
--	  shiftIn/shiftOut mode
const byte FIRMATA_SHIFT = 0x05
--	  pin included in I2C setup
const byte FIRMATA_I2C = 0x06

-- Global vars
-- store a multi-byte message
var byte firmata_stored_input_data[FIRMATA_MAX_DATA_BYTES]
-- stores number of bytes in current SysEx message
var byte firmata_sysex_bytes_read = 0
-- store the number of expected data bytes
var byte firmata_wait_for_data = 0
-- store the command to execute after getting multi-byte data
var byte firmata_execute_multi_byte_command = 0
--  channel data for multiByteCommands (is it the pin number ???)
var byte firmata_multi_byte_channel = 0



-- Sanity check
if defined(firmata_carrier) == false then
   _error "You have to specicy 'firmata_carrier' alias, pointing to a pseudo-variable linked to a communication device (for instance, 'serial_hw_data')"
end if


-- -- -- GENERIC -- -- --
-- Firmata API

procedure firmata_print_version() is
   firmata_carrier = FIRMATA_REPORT_VERSION
   firmata_carrier = FIRMATA_MAJOR_VERSION
   firmata_carrier = FIRMATA_MINOR_VERSION
end procedure

procedure firmata_pin_mode(byte in pinnum, byte in mode) is
   pragma inline  -- too greedy ?
   -- only "input" and "output" mode are currently supported
   case mode of
      FIRMATA_OUTPUT:
      block
         pintools_direction[pinnum] = output
      end block
      FIRMATA_INPUT:
      block
         pintools_direction[pinnum] = input
      end block
      FIRMATA_ANALOG:
      block
         -- because 18f4550 has dependent pins, can't choose
         -- specific analog pin. In this case, pinnum represents
         -- the number of ADC channels we want
         
         adc_nchannel = pinnum
         adc_init()
      end block
   end case
   -- TODO: update firmata_port_status
end procedure

procedure firmata_pin_strobe(byte in pinnum, byte in howmany, word in on_interval, word in off_interval) is
   var byte i
   pintools_direction[pinnum] = output
   for howmany loop
      delay_1ms(off_interval)
      pintools_level[pinnum] = high
      delay_1ms(on_interval)
      pintools_level[pinnum] = low
   end loop
end procedure

procedure firmata_blink_version() is
   -- blinking version isn't mandatory if no pin has been assigned
   -- for this purpose
   if defined(firmata_version_blink_pinnum) == true then
      pintools_direction[firmata_version_blink_pinnum] = output
      firmata_pin_strobe(firmata_version_blink_pinnum,FIRMATA_MAJOR_VERSION,200,400)
      delay_1ms(300)
      firmata_pin_strobe(firmata_version_blink_pinnum,2,1,4)	 -- separator, a quick burst
      delay_1ms(300)
      firmata_pin_strobe(firmata_version_blink_pinnum,FIRMATA_MINOR_VERSION,200,400)
   end if
end procedure

procedure firmata_begin() is
   firmata_blink_version()
   delay_1ms(300)
   firmata_print_version()
   ;;-- firmata_print_firmware_version()
end procedure

procedure firmata_process_sysex_message() is
   -- TODO
   asm nop
end procedure

---- Report all
--procedure firmata_report() is
--end procedure

-- -- -- SPECIFIC -- -- --
-- Following procedures are specific to 18f4550 and jaluino
-- (I say that, because in case firmata.jal becomes generic, some work
-- will have to done

-- TODO: describe the board, but maybe should be in device files
const byte FIRMATA_NUM_PORTS = 5

-- stores whether a given port should be included in reporting
-- /!\ bit arrays not supported, so used "byte", but this really is
-- just about true/false values
var byte firmata_report_ports [FIRMATA_NUM_PORTS] = {0,0,0,0,0}
-- stores port status
var byte firmata_port_status [FIRMATA_NUM_PORTS] = {PORTA,PORTB,PORTC,PORTD,PORTE}
-- stores previously sent status, to optimize comm. (if unchanged, no 
-- need to send it again
-- init to impossible value for a PORT, so when first compared, send value
var byte firmata_previous_port_status [FIRMATA_NUM_PORTS] = {0xFF,0xFF,0xFF,0xFF,0xFF}
-- stores which ADC channels should be included when reporting ADC levels
-- it could be optimized, using bitwise array, but... 
-- init so no reporting is done when starting
var byte firmata_analog_report [ADC_NTOTAL_CHANNEL]
var byte tmp
for ADC_NTOTAL_CHANNEL using tmp loop
   firmata_analog_report[tmp] = 0
end loop

-- define our own callback to deal with digital callback
procedure firmata_callback_digital_message(byte in port, word in value) is
   -- TODO: some pins should be protected, for instance pins involved in serial
   -- or USB, etc...
   case port of
      0: PORTA = byte(value)
      1: PORTB = byte(value)
      2: PORTC = byte(value)
      3: PORTD = byte(value)
      4: PORTE = byte(value)
   end case
   firmata_port_status[port] = byte(value)
end procedure

-- analog callback, register/unregister ADC channels included in reporting
procedure firmata_callback_report_analog(byte in channel, byte in enable) is
   firmata_analog_report[channel] = enable
end procedure

-- set pin mode
alias firmata_callback_set_pin_mode is firmata_pin_mode

-- set a message to be sent, with information about digital pin status
-- doesn't send the message itself, just prepare it)
procedure firmata_callback_report_digital(byte in port, byte in report) is
   -- register this port to be included in reporting
   firmata_report_ports[port] = report
end procedure

procedure firmata_send_digital_port(byte in port, word in data) is
   -- it's a multichannel byte
   firmata_carrier = FIRMATA_DIGITAL_MESSAGE | (port & 0x0F)
   -- send bits 0-6
   firmata_carrier = byte(data % 128)
   firmata_carrier = byte(data >> 7)
end procedure

procedure firmata_output_port(byte in port, byte in mask) is
   var byte portval = mask & firmata_port_status[port]
   -- did status changed ?
   if firmata_previous_port_status[port] != portval then
      firmata_send_digital_port(port,portval)
      -- cache sent value
      firmata_previous_port_status[port] = portval
   end if
end procedure

-- check all the active digital inputs for change of state, then add any events
-- to be sent through firmata_carrier
-- this procedure typically should be called regularly in a forever loop
procedure firmata_check_digital_inputs() is
   var byte i
   for FIRMATA_NUM_PORTS using i loop
      if firmata_report_ports[i] != 0 then
         -- TODO: protect some pins ? careful, this should
         -- be centralized, see board description
         var byte mask = 0b1111_1111   -- no filter
         firmata_output_port(i,mask)
      end if
   end loop
   
end procedure

procedure firmata_send_as_two_7bits_bytes(word in val) is
   -- this is because firmata is based on MIDI, thus 7bits
   firmata_carrier = val & 0b0111_1111          -- LSB
   firmata_carrier = val >> 7 & 0b0111_1111     -- MSB
end procedure

procedure firmata_send_analog(byte in channel, word in adcval) is
   firmata_carrier = FIRMATA_ANALOG_MESSAGE | (channel & 0x0F)
   firmata_send_as_two_7bits_bytes(adcval)
   -- firmata_carrier = byte(adcval)
end procedure

procedure firmata_check_analog_inputs() is
   var byte channel
   var word adcval
   for ADC_NTOTAL_CHANNEL using channel loop
      if firmata_analog_report[channel] != 0 then
         -- what if user didn't include ADC libs ?
         -- this procedure, as others, should actually be part of
         -- some firmata flavor implementation (standard, servo, i2c, ...)
         
         firmata_send_analog(channel,adcval)
         
      end if
   end loop
end procedure

-- -- -- EVAL LOOP -- -- --
-- main procedure to read and eval Firmata frames
procedure firmata_process_input() is
   var byte input_data
   var bit parsing_sysex = false
   var byte command
   
   -- read one char from carrier (serial, usb, ...)
   if serial_hw_read(input_data) then
      firmata_carrier = input_data
      
      if parsing_sysex == true then
         -- SysEx message
         if input_data == FIRMATA_END_SYSEX then
            -- reach end of sysex message, now process it
            parsing_sysex = false
            firmata_process_sysex_message()
         else
            -- append sysex content
            firmata_stored_input_data[firmata_sysex_bytes_read] = input_data
            firmata_sysex_bytes_read = firmata_sysex_bytes_read + 1
         end if
      elsif firmata_wait_for_data > 0 & input_data < 128 then
         -- expecting several bytes, fill the buffer
         firmata_wait_for_data = firmata_wait_for_data - 1
         firmata_stored_input_data[firmata_wait_for_data] = input_data
         if firmata_wait_for_data == 0 & firmata_execute_multi_byte_command != 0 then
            -- got whole message, execute registered command
            case firmata_execute_multi_byte_command of
               -- firmata being based on MIDI protocol, it uses 7-bits payload (almost a byte)
               -- sending 2 * 7-bits payload is done by casting to a word where 14-bits are used
               
               -- Receiving this message means we've ordered to output an analog signal, 
               -- like PWM
               FIRMATA_ANALOG_MESSAGE: 
               if defined(firmata_callback_analog_message) == true then
                  if defined(ADC_DYNAMIC) == false then
                     _error "Needs dynamic ADC to modify ADC channels on-the-fly, please define ADC_DYNAMIC..."
                  end if
                  -- channel here is a pin number
                  firmata_callback_analog_message(firmata_multi_byte_channel,firmata_stored_input_data[0])
               end if 
               
               -- Receiving this message means we've ordered to output a digital signal
               -- that is, turning high/low a pin
               FIRMATA_DIGITAL_MESSAGE:
               if defined(firmata_callback_digital_message) == true then
                  -- channel here is a port
                  -- (Seb: I think digital message for one pin does not exist due to 
                  -- optimization concern: sending one byte representing one pin (0/1)
                  -- or one byte representing one port (0b........) does not cost the same
                  var word first = word(firmata_stored_input_data[0] << 7)
                  var word second = word(firmata_stored_input_data[1])
                  firmata_callback_digital_message(firmata_multi_byte_channel,word(first+second))
               else
                  _debug "No firmata_callback_digital_message defined, can't react on FIRMATA_DIGITAL_MESSAGE"
               end if
               
               -- Receiving this message means we need to change pin's mode: input, output,
               -- analog, pwm, etc...
               FIRMATA_SET_PIN_MODE:
               if defined(firmata_callback_set_pin_mode) == true then
                  firmata_callback_set_pin_mode(firmata_stored_input_data[1],firmata_stored_input_data[0])
               else
                  _debug "No firmata_callback_set_pin_mode defined, can't react on FIRMATA_SET_PIN_MODE"
               end if
               
               -- Receiving this message just means we need to register an ADC channel
               -- in reporting
               FIRMATA_REPORT_ANALOG:
               if defined(firmata_callback_report_analog) == true then
                  -- channel hare is a pin number
                  firmata_callback_report_analog(firmata_multi_byte_channel,firmata_stored_input_data[0])
               end if
               
               -- Receiving this message just means we need to register a pin in reporting
               FIRMATA_REPORT_DIGITAL:
               if defined(firmata_callback_report_digital) == true then
                  -- channel here is a port
                  firmata_callback_report_digital(firmata_multi_byte_channel,firmata_stored_input_data[0])
               end if
            end case
            firmata_execute_multi_byte_command = 0	-- reset action
         end if
      else
         -- remove channel info from command byte if less than 0xF0
         -- commands >= 0xF0 don't have a multichannel byte
         if input_data < 0xF0 then
            command = input_data & 0xF0
            firmata_multi_byte_channel = input_data & 0x0F
         else
            -- commands in the 0xF* range don't use channel data
            command = input_data
         end if
         
         -- eval command
         if command == FIRMATA_ANALOG_MESSAGE | command == FIRMATA_DIGITAL_MESSAGE |
         command == FIRMATA_SET_PIN_MODE then
            firmata_wait_for_data = 2
            firmata_execute_multi_byte_command = command
         elsif command == FIRMATA_REPORT_ANALOG | command == FIRMATA_REPORT_DIGITAL then
            firmata_wait_for_data = 1
            firmata_execute_multi_byte_command = command
         elsif command == FIRMATA_START_SYSEX then
            parsing_sysex = true
            firmata_sysex_bytes_read = 0
         elsif command == FIRMATA_SYSTEM_RESET then
            firmata_system_reset()
         elsif command == FIRMATA_REPORT_VERSION then
            firmata_print_version()
         end if
      end if
      
   end if
   
end procedure


procedure firmata_process_output() is
   pragma inline
   firmata_check_digital_inputs()
   firmata_check_analog_inputs()
end procedure

