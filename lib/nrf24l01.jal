-- ------------------------------------------------------
-- Title: nRF24L01 library (wireless)
-- Author: Sebastien Lelong, Copyright (c) 2008..2013, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4p
-- Revision: $Revision: 373 $
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library can be used with Crumboard shield, and declares some
-- aliases for conveniency. It basically describe the shield with logical name.
-- (crumboard_led1 instead of pin_A0)
--
-- Sources: http://github.com/aaronds/arduino-nrf24l01/downloads
--
-- Notes: jalv2 port of MiRF lib for arduino. Greatly inspired from MiRF lib port for arduino, by
-- Aaron Shrimpton and Stefan Engelke.
--
-- TODO:
--  * remove delay between csn low/high ?
--  * implement multiple pipeline (probably needs to revise buffers)
--  * implement channel scanner to pick the best available (based on round-trip time ?)
--  * implement helper such as speed select, power select,...
--  ...

-- -----------------
-- CONSTANTS DEFS --
-- -----------------
-- (from header file)

-- Memory Map
const byte NRF24_CONFIG_REG  = 0x00
const byte NRF24_EN_AA       = 0x01
const byte NRF24_EN_RXADDR   = 0x02
const byte NRF24_SETUP_AW    = 0x03
const byte NRF24_SETUP_RETR  = 0x04
const byte NRF24_RF_CH       = 0x05
const byte NRF24_RF_SETUP    = 0x06
const byte NRF24_STATUS      = 0x07
const byte NRF24_OBSERVE_TX  = 0x08
const byte NRF24_CD          = 0x09
const byte NRF24_RX_ADDR_P0  = 0x0A
const byte NRF24_RX_ADDR_P1  = 0x0B
const byte NRF24_RX_ADDR_P2  = 0x0C
const byte NRF24_RX_ADDR_P3  = 0x0D
const byte NRF24_RX_ADDR_P4  = 0x0E
const byte NRF24_RX_ADDR_P5  = 0x0F
const byte NRF24_TX_ADDR     = 0x10
const byte NRF24_RX_PW_P0    = 0x11
const byte NRF24_RX_PW_P1    = 0x12
const byte NRF24_RX_PW_P2    = 0x13
const byte NRF24_RX_PW_P3    = 0x14
const byte NRF24_RX_PW_P4    = 0x15
const byte NRF24_RX_PW_P5    = 0x16
const byte NRF24_FIFO_STATUS = 0x17
const byte NRF24_DYNPD       = 0x1C
const byte NRF24_FEATURE     = 0x1D

-- Bit Mnemonics
const byte NRF24_MASK_RX_DR  = 6
const byte NRF24_MASK_TX_DS  = 5
const byte NRF24_MASK_MAX_RT = 4
const byte NRF24_EN_CRC      = 3
const byte NRF24_CRCO        = 2
const byte NRF24_PWR_UP      = 1
const byte NRF24_PRIM_RX     = 0
const byte NRF24_ENAA_P5     = 5
const byte NRF24_ENAA_P4     = 4
const byte NRF24_ENAA_P3     = 3
const byte NRF24_ENAA_P2     = 2
const byte NRF24_ENAA_P1     = 1
const byte NRF24_ENAA_P0     = 0
const byte NRF24_ERX_P5      = 5
const byte NRF24_ERX_P4      = 4
const byte NRF24_ERX_P3      = 3
const byte NRF24_ERX_P2      = 2
const byte NRF24_ERX_P1      = 1
const byte NRF24_ERX_P0      = 0
const byte NRF24_AW          = 0
const byte NRF24_ARD         = 4
const byte NRF24_ARC         = 0
const byte NRF24_CH          = 0
const byte NRF24_CONT_WAVE   = 7
const byte NRF24_RF_DR_LOW   = 5
const byte NRF24_PLL_LOCK    = 4
const byte NRF24_RF_DR_HIGH  = 3
const byte NRF24_RF_PWR      = 1
const byte NRF24_LNA_HCURR   = 0        
const byte NRF24_RX_DR       = 6
const byte NRF24_TX_DS       = 5
const byte NRF24_MAX_RT      = 4
const byte NRF24_RX_P_NO     = 1
const byte NRF24_TX_FULL     = 0
const byte NRF24_PLOS_CNT    = 4
const byte NRF24_ARC_CNT     = 0
const byte NRF24_TX_REUSE    = 6
const byte NRF24_FIFO_FULL   = 5
const byte NRF24_TX_EMPTY    = 4
const byte NRF24_RX_FULL     = 1
const byte NRF24_RX_EMPTY    = 0
const byte NRF24_EN_DPL      = 2
const byte NRF24_DPL_P5      = 5
const byte NRF24_DPL_P4      = 4
const byte NRF24_DPL_P3      = 3
const byte NRF24_DPL_P2      = 2
const byte NRF24_DPL_P1      = 1
const byte NRF24_DPL_P0      = 0

-- Instruction Mnemonics --
const byte NRF24_R_REGISTER    = 0x00
const byte NRF24_W_REGISTER    = 0x20
const byte NRF24_REGISTER_MASK = 0x1F
const byte NRF24_R_RX_PAYLOAD  = 0x61
const byte NRF24_W_TX_PAYLOAD  = 0xA0
const byte NRF24_FLUSH_TX      = 0xE1
const byte NRF24_FLUSH_RX_REG  = 0xE2
const byte NRF24_REUSE_TX_PL   = 0xE3
const byte NRF24_NOP           = 0xFF
const byte NRF24_ACTIVATE      = 0x50


-- Defaulting
--
-- Nrf24l settings
const byte NRF24_ADDR_LEN = 5
-- Enable CRC, 1-byte length
const byte NRF24_CONFIG = ((1<<NRF24_EN_CRC) | (0<<NRF24_CRCO) )

-- Payload width in bytes default 16 max 32
if !defined(NRF24_PAYLOAD_SIZE) then
   const byte NRF24_PAYLOAD_SIZE = 16
end if

-- Channel 0 - 127 or 0 - 84 in the US.
if !defined(NRF24_CHANNEL) then
   const byte NRF24_CHANNEL = 20
end if

-- Fool proof checks
--
-- CE Pin controls RX / TX, default 8.
if !defined(nrf24_ce_pin) then
   _error "Define nrf24_ce_pin pin alias"
end if

-- CSN Pin Chip Select Not, default 7.
if !defined(nrf24_csn_pin) then
   _error "Define nrf24_csn_pin pin alias"
end if

if !defined(NRF24_RECEIVE_ADDR) then
   _error "Define NRF24_RECEIVE_ADDR as the receiving address for this module"
end if

if !defined(spi_master_exchange) then
   _error "Define spi_master_exchange as an alias to SPI full duplex exchange function (spi_master_hw_exchange or spi_master_hw2_exchange)"
end if

-- internal state: in read mode ?
var bit nrf24_ptx

-- Store the pipe number from which data was received
var byte nrf24_last_pipe_number = 0xFF -- impossible value as init

-- ------
-- API --
-- ------
procedure nrf24_init()
procedure nrf24_write_byte_register(byte in reg, byte in value)
procedure nrf24_power_up_rx()
procedure nrf24_flush_rx()
procedure nrf24_set_rx_pipe(byte in pipe, byte in addr[])
procedure nrf24_write_array_register(byte in reg, byte in data[])
procedure nrf24_transmit_sync(byte in len)
procedure nrf24_read_register(byte in reg, byte in len)
procedure nrf24_transfer_sync(byte in len)
procedure nrf24_send()
function nrf24_get_status() return byte
procedure nrf24_power_up_tx()
function nrf24_rx_fifo_empty() return bit

const byte NRF24_BUFFER_LEN = 10
var volatile byte nrf24_bufread[NRF24_BUFFER_LEN]
var volatile byte nrf24_bufwrite[NRF24_BUFFER_LEN]

-- Initializes pins to communicate with the MiRF module
-- Should be called in the early initializing phase at startup.
procedure nrf24_init() is
   -- init buffers in/out
   var byte i
   for count(nrf24_bufwrite) using i loop
      -- arbitrary value
      nrf24_bufwrite[i] = 0x0F
      nrf24_bufread[i] = 0x0F
   end loop
   -- Set receiving address, on pipe 1 (pipe 0 is used to auto-ACK, combined with TX address)
   nrf24_set_rx_pipe(1,NRF24_RECEIVE_ADDR)
   -- Set RF channel
   nrf24_write_byte_register(NRF24_RF_CH,NRF24_CHANNEL)
   -- Start receiver 
   nrf24_power_up_rx()
   nrf24_flush_rx()
end procedure

-- Write an array of data into a register
procedure nrf24_write_byte_register(byte in reg, byte in value) is
   nrf24_csn_pin = low
   var byte _trash = spi_master_exchange(NRF24_W_REGISTER | (NRF24_REGISTER_MASK & reg))
   _trash = spi_master_exchange(value)
   nrf24_csn_pin = high
end procedure

procedure nrf24_power_up_rx() is
   nrf24_ptx = 0
   nrf24_ce_pin = low
   nrf24_write_byte_register(NRF24_CONFIG_REG, NRF24_CONFIG | ( (1<<NRF24_PWR_UP) | (1<<NRF24_PRIM_RX) ) )
   nrf24_ce_pin = high
   nrf24_write_byte_register(NRF24_STATUS,(1 << NRF24_TX_DS) | (1 << NRF24_MAX_RT)); 
end procedure

procedure nrf24_flush_rx() is
   nrf24_csn_pin = low
   var byte _trash = spi_master_exchange(NRF24_FLUSH_RX_REG)
   nrf24_csn_pin = high
end procedure

-- sets the receiving address for a pipe number,
-- and set payload width as well
procedure nrf24_set_rx_pipe(byte in pipe, byte in addr[]) is
   nrf24_ce_pin = low
   -- Pipe 0 and 1 can be 5-bytes long, but others are derived from pipe 1,
   -- only the latest byte is considered
   var byte last = addr[count(addr)-1]
   print_byte_hex(serial_hw_data,last)
   print_crlf(serial_hw_data)
   case pipe of
      0: block
            nrf24_write_array_register(NRF24_RX_ADDR_P0,addr)
   	    nrf24_write_byte_register(NRF24_RX_PW_P0, NRF24_PAYLOAD_SIZE)
	 end block
      1: block
            nrf24_write_array_register(NRF24_RX_ADDR_P1,addr)
   	    nrf24_write_byte_register(NRF24_RX_PW_P1, NRF24_PAYLOAD_SIZE)
	 end block
      2: block
            nrf24_write_byte_register(NRF24_RX_ADDR_P2,last)
   	    nrf24_write_byte_register(NRF24_RX_PW_P2, NRF24_PAYLOAD_SIZE)
	 end block
      3: block
            nrf24_write_byte_register(NRF24_RX_ADDR_P3,last)
   	    nrf24_write_byte_register(NRF24_RX_PW_P3, NRF24_PAYLOAD_SIZE)
	 end block
      4: block
            nrf24_write_byte_register(NRF24_RX_ADDR_P4,last)
   	    nrf24_write_byte_register(NRF24_RX_PW_P4, NRF24_PAYLOAD_SIZE)
	 end block
      5: block
            nrf24_write_byte_register(NRF24_RX_ADDR_P5,last)
   	    nrf24_write_byte_register(NRF24_RX_PW_P5, NRF24_PAYLOAD_SIZE)
	 end block
   end case
   -- Enable data pipe (note, P0 and P1 are set to 1 by default, not an issue though if
   -- we set them here)
   nrf24_read_register(NRF24_EN_RXADDR,1)
   nrf24_write_byte_register(NRF24_EN_RXADDR,(nrf24_bufread[0] | (1<<pipe)))

   nrf24_ce_pin = high
end procedure

-- Write an array of data into a register
procedure nrf24_write_array_register(byte in reg, byte in data[]) is
   nrf24_csn_pin = low
   var byte len = byte(count(data))
   var byte i
   for len using i loop
      nrf24_bufwrite[i] = data[i]
   end loop
   var byte _trash = spi_master_exchange(NRF24_W_REGISTER | (NRF24_REGISTER_MASK & reg))
   nrf24_transmit_sync(len)
   nrf24_csn_pin = high
end procedure

procedure nrf24_transmit_sync(byte in len) is
   var byte i
   for len using i loop
      var byte _trash = spi_master_exchange(nrf24_bufwrite[i])
   end loop
end procedure


-- Reads an array of bytes from the given start position in the MiRF registers.
procedure nrf24_read_register(byte in reg, byte in len) is
   nrf24_csn_pin = low
   var byte _trash = spi_master_exchange(NRF24_R_REGISTER | (NRF24_REGISTER_MASK & reg))
   nrf24_transfer_sync(len)
   nrf24_csn_pin = high
end procedure

procedure nrf24_transfer_sync(byte in len) is
   var byte i = 0
   nrf24_bufread[0] = 0x00
   
   for len loop
      nrf24_bufread[i] = spi_master_exchange(nrf24_bufwrite[i])
      i = i + 1
   end loop
end procedure

-- Sends a data package to the default address. Sending buffer should be
-- previously filled. Well, you should use pseudo-var nrf24_data for ease
procedure nrf24_send() is
   
   var byte st = nrf24_get_status()
   while nrf24_ptx == 1 loop
      st = nrf24_get_status()
      if (st & ((1 << NRF24_TX_DS) | (1 << NRF24_MAX_RT))) == true then
         nrf24_ptx = 0
         exit loop
      end if
   end loop
   
   nrf24_ce_pin = low
   nrf24_power_up_tx()
   nrf24_csn_pin = low
   
   var byte _trash = spi_master_exchange(NRF24_FLUSH_TX)
   nrf24_csn_pin = high
   delay_1ms(1) ; delete ?
   nrf24_csn_pin = low
   
   _trash = spi_master_exchange(NRF24_W_TX_PAYLOAD)
   -- send as many bytes as declared in payload
   nrf24_transmit_sync(NRF24_PAYLOAD_SIZE)
   
   -- Pull up chip select
   nrf24_csn_pin = high
   -- Start transmission
   nrf24_ce_pin = high
   
end procedure

function nrf24_get_status() return byte is
   var byte rv
   nrf24_read_register(STATUS,1)
   rv = nrf24_bufread[0]
   return rv
end function

procedure nrf24_power_up_tx() is
   nrf24_ptx = 1
   nrf24_write_byte_register(NRF24_CONFIG_REG, NRF24_CONFIG | ( (1<<NRF24_PWR_UP) | (0<<NRF24_PRIM_RX) ) )
end procedure

procedure nrf24_power_down() is
   nrf24_ce_pin = low
   nrf24_write_byte_register(NRF24_CONFIG_REG, NRF24_CONFIG)
end procedure

-- Test if chip is still sending.
-- When sending has finished return chip to listening.
function nrf24_is_sending() return bit is
   var byte st
   
   if nrf24_ptx == 1 then
      st = nrf24_get_status()
      -- if sending successful (TX_DS) or max retries exceded (MAX_RT).
      if (st & ((1 << NRF24_TX_DS)  | (1 << NRF24_MAX_RT))) != 0 then
         nrf24_power_up_rx()
         return false
      end if
      return true
   end if
   
   return false
   
end function

-- Checks if data is available for reading
function nrf24_data_ready() return bit is
   -- See note in nrf24_get_data() function - just checking RX_DR isn't good enough
   var byte st  = nrf24_get_status()
   
   -- We can short circuit on RX_DR, but if it's not set, we still need
   -- to check the FIFO for any pending packets
   if (st & (1 << NRF24_RX_DR)) != 0 then
      return true
   end if
   return !nrf24_rx_fifo_empty()
   
end function

function nrf24_rx_fifo_empty() return bit is
   var byte fifostatus
   nrf24_read_register(NRF24_FIFO_STATUS,1)
   fifostatus = nrf24_bufread[0]
   return (fifostatus & (1 << NRF24_RX_EMPTY))
end function

-- Reads payload bytes into data array
-- It reads from the 3-levels FIFO. All RX channels (pipes)
-- share the FIFO, so you get data from any data pipes
procedure nrf24_get_data() is
   -- store current data pipe number from which we received data
   var byte st = nrf24_get_status()
   nrf24_last_pipe_number = (st>>NRF24_RX_P_NO) & 0b111
   
   nrf24_csn_pin = low -- Pull down chip select
   var byte _trash = spi_master_exchange(NRF24_R_RX_PAYLOAD)
   nrf24_transfer_sync(NRF24_PAYLOAD_SIZE)
   nrf24_csn_pin = high -- Pull up chip select

   -- NVI: per product spec, p 67, note c:
   --  "The RX_DR IRQ is asserted by a new packet arrival event. The procedure
   --  for handling this interrupt should be: 1) read payload through SPI,
   --  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
   --  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
   --  repeat from step 1)."
   -- So if we're going to clear RX_DR here, we need to check the RX FIFO
   -- in the dataReady() function
   nrf24_write_byte_register(NRF24_STATUS,(1<<NRF24_RX_DR)) -- Reset status register
end procedure

-- Sets the transmitting address
procedure nrf24_set_taddr(byte in adr[]) is
   nrf24_write_array_register(NRF24_TX_ADDR,adr)
   -- RX_ADDR_P0 must be set to the sending addr for auto ack to work.
   nrf24_write_array_register(NRF24_RX_ADDR_P0,adr)
end procedure

-- Payload can be more than 1 byte long, so we need to 
-- track, when reading values, if we're starting to read
-- (ie. data is just received) or if we're continuing to read
-- (ie. move forward withing buffer)
var byte _nrf24_receive_next_buffer_index = 0

-- pseudo-var to read a byte, blocking call
function nrf24_data'get() return byte is
   -- reached end of buffer ? reset next index
   if _nrf24_receive_next_buffer_index == NRF24_PAYLOAD_SIZE then
      _nrf24_receive_next_buffer_index = 0
   end if

   -- next index is 0 ? Means nothing in buffer, we need to receive data
   if _nrf24_receive_next_buffer_index == 0 then
      while nrf24_data_ready() == false loop
      end loop
      nrf24_get_data()
   end if

   var byte c
   c = nrf24_bufread[_nrf24_receive_next_buffer_index]
   _nrf24_receive_next_buffer_index = _nrf24_receive_next_buffer_index + 1
   return c

end function


var byte _nrf24_send_next_buffer_index = 0
-- pseudo-var to send a byte, blocking call
-- (will block until sent)
-- Call this procedure as many times as payload size. This will load
-- sending buffer. Once buffer is full (payload size is reached) data
-- is actually sent (and not before). When sent, call will block until
-- data is actually sent.
procedure nrf24_data'put(byte in data) is
   -- buffer filled, now send
   if _nrf24_send_next_buffer_index == NRF24_PAYLOAD_SIZE then
      nrf24_send()
      while nrf24_is_sending() == true loop
      end loop
      _nrf24_send_next_buffer_index = 0
   end if

   -- Write payload
   nrf24_bufwrite[_nrf24_send_next_buffer_index] = data
   _nrf24_send_next_buffer_index = _nrf24_send_next_buffer_index + 1

end procedure

procedure nrf24_toggle_features() is
  nrf24_csn_pin = low
  nrf24_transfer_sync(NRF24_ACTIVATE)
  nrf24_transfer_sync(0x73)
  nrf24_csn_pin = high
end procedure

-- !!! untested
procedure nrf24_enable_dynamic_payloads() is
  -- Enable dynamic payload throughout the system
  nrf24_read_register(NRF24_FEATURE,1)
  var byte tmp[1]
  tmp[0] = (nrf24_bufread[0] | (1<<NRF24_EN_DPL))
  nrf24_write_array_register(NRF24_TX_ADDR,tmp)
  -- If it didn't work, the features are not enabled
  nrf24_read_register(NRF24_FEATURE,1)
  var byte ok = nrf24_bufread[0]
  if ok == 0 then
    -- So enable them and try again
    nrf24_toggle_features()
    nrf24_write_array_register(NRF24_FEATURE,tmp)
  end if
  
  -- Enable dynamic payload on all pipes
  --
  -- Not sure the use case of only having dynamic payload on certain
  -- pipes, so the library does not support it.
  nrf24_read_register(NRF24_DYNPD,1)
  tmp[0] = (nrf24_bufread[0] | (1<<NRF24_DPL_P5) | (1<<NRF24_DPL_P4) | (1<<NRF24_DPL_P3) | (1<<NRF24_DPL_P2) | (1<<NRF24_DPL_P1) | (1<<NRF24_DPL_P0) )
  nrf24_write_array_register(NRF24_DYNPD,tmp)
  
  ;dynamic_payloads_enabled = true;
end procedure


-- ---------------------- --
-- Print/Debug procedures --
-- ---------------------- --

procedure nrf24_print_status() is
   var byte st = nrf24_get_status()
   const byte st00[] = "STATUS\t\t = "
   print_string(serial_hw_data,st00)
   print_byte_bin(serial_hw_data,st)
   const byte st01[] = " RX_DR="
   print_string(serial_hw_data,st01)
   print_byte_dec(serial_hw_data,((st>>NRF24_RX_DR) & 1))
   const byte st02[] = " TX_DS="
   print_string(serial_hw_data,st02)
   print_byte_dec(serial_hw_data,((st>>NRF24_TX_DS) & 1))
   const byte st03[] = " MAX_RT="
   print_string(serial_hw_data,st03)
   print_byte_dec(serial_hw_data,((st>>NRF24_MAX_RT) & 1))
   const byte st04[] = " RX_P_NO="
   print_string(serial_hw_data,st04)
   print_byte_dec(serial_hw_data,((st>>NRF24_RX_P_NO) & 0b111))
   const byte st05[] = " TX_FULL="
   print_string(serial_hw_data,st05)
   print_byte_dec(serial_hw_data,((st>>NRF24_TX_FULL) & 1))
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_rf_setup() is
   nrf24_read_register(NRF24_RF_SETUP,1)
   var byte rf_setup = nrf24_bufread[0]
   const byte rf30[] = "RF_SETUP\t = "
   print_string(serial_hw_data,rf30)
   print_byte_bin(serial_hw_data,rf_setup)
   const byte rf31[] = "  CONT_WAVE="
   print_string(serial_hw_data,rf31)
   print_byte_dec(serial_hw_data,(rf_setup >> NRF24_CONT_WAVE) & 1)
   const byte rf32[] = "  RF_DR_LOW="
   print_string(serial_hw_data,rf32)
   print_byte_dec(serial_hw_data,(rf_setup >> NRF24_RF_DR_LOW) & 1)
   const byte rf33[] = "  PLL_LOCK="
   print_string(serial_hw_data,rf33)
   print_byte_dec(serial_hw_data,(rf_setup >> NRF24_PLL_LOCK) & 1)
   const byte rf34[] = "  RF_DR_HIGH="
   print_string(serial_hw_data,rf34)
   print_byte_dec(serial_hw_data,(rf_setup >> NRF24_RF_DR_HIGH) & 1)
   const byte rf35[] = "  RF_PWR="
   print_string(serial_hw_data,rf35)
   print_byte_dec(serial_hw_data,(rf_setup >> NRF24_RF_PWR) & 0b11)
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_config() is
   nrf24_read_register(NRF24_CONFIG_REG,1)
   var byte config = nrf24_bufread[0]
   const byte cf00[] = "CONFIG\t = "
   print_string(serial_hw_data,cf00)
   print_byte_bin(serial_hw_data,config)
   const byte cf2[] = "  MASK_RX_DR="
   print_string(serial_hw_data,cf2)
   print_byte_dec(serial_hw_data,(config >> NRF24_MASK_RX_DR) & 1)
   const byte cf3[] = "  MASK_TX_DS="
   print_string(serial_hw_data,cf3)
   print_byte_dec(serial_hw_data,(config >> NRF24_MASK_TX_DS) & 1)
   const byte cf4[] = "  MASK_MAX_RT="
   print_string(serial_hw_data,cf4)
   print_byte_dec(serial_hw_data,(config >> NRF24_MASK_MAX_RT) & 1)
   const byte cf5[] = "  EN_CRC="
   print_string(serial_hw_data,cf5)
   print_byte_dec(serial_hw_data,(config >> NRF24_EN_CRC) & 1)
   const byte cf6[] = "  CRCO="
   print_string(serial_hw_data,cf6)
   print_byte_dec(serial_hw_data,(config >> NRF24_CRCO) & 1)
   const byte cf7[] = "  PWR_UP="
   print_string(serial_hw_data,cf7)
   print_byte_dec(serial_hw_data,(config >> NRF24_PWR_UP) & 1)
   const byte cf8[] = "  PRIM_RX="
   print_string(serial_hw_data,cf8)
   print_byte_dec(serial_hw_data,(config >> NRF24_PWR_UP) & 1)
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_en_aa() is
   nrf24_read_register(NRF24_EN_AA,1)
   var byte en_aa = nrf24_bufread[0]
   const byte en9[] = "EN_AA\t = "
   print_string(serial_hw_data,en9)
   print_byte_bin(serial_hw_data,en_aa)
   const byte en10[] = "  ENAA_P5="
   print_string(serial_hw_data,en10)
   print_byte_dec(serial_hw_data,(en_aa >> NRF24_ENAA_P5) & 1)
   const byte en11[] = "  ENAA_P4="
   print_string(serial_hw_data,en11)
   print_byte_dec(serial_hw_data,(en_aa >> NRF24_ENAA_P4) & 1)
   const byte en12[] = "  ENAA_P3="
   print_string(serial_hw_data,en12)
   print_byte_dec(serial_hw_data,(en_aa >> NRF24_ENAA_P3) & 1)
   const byte en13[] = "  ENAA_P2="
   print_string(serial_hw_data,en13)
   print_byte_dec(serial_hw_data,(en_aa >> NRF24_ENAA_P2) & 1)
   const byte en14[] = "  ENAA_P1="
   print_string(serial_hw_data,en14)
   print_byte_dec(serial_hw_data,(en_aa >> NRF24_ENAA_P1) & 1)
   const byte en15[] = "  ENAA_P0="
   print_string(serial_hw_data,en15)
   print_byte_dec(serial_hw_data,(en_aa >> NRF24_ENAA_P0) & 1)
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_setup_retr() is
   nrf24_read_register(NRF24_SETUP_RETR,1)
   var byte setup_retr = nrf24_bufread[0]
   const byte ret25[] = "SETUP_RETR\t = "
   print_string(serial_hw_data,ret25)
   print_byte_bin(serial_hw_data,setup_retr)
   const byte ret26[] = "  ARD="
   print_string(serial_hw_data,ret26)
   print_byte_dec(serial_hw_data,(setup_retr >> NRF24_ARD) & 0b1111)
   const byte ret27[] = "  ARC="
   print_string(serial_hw_data,ret27)
   print_byte_dec(serial_hw_data,(setup_retr >> NRF24_ARC) & 0b1111)
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_address_register(byte in str[], byte in reg, byte in qty) is
   print_string(serial_hw_data,str)
   while qty != 0 loop
      nrf24_read_register(reg,count(NRF24_RECEIVE_ADDR))
      var byte i
      for count(NRF24_RECEIVE_ADDR) using i loop
         print_byte_hex(serial_hw_data,nrf24_bufread[i])
      end loop
      serial_hw_data = " "
      qty = qty - 1
      reg = reg + 1 -- moving to next adjacent register
   end loop
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_byte_register(byte in str[],byte in reg, byte in qty) is
   print_string(serial_hw_data,str)
   while qty != 0 loop
      nrf24_read_register(reg,1)
      print_byte_hex(serial_hw_data,nrf24_bufread[0])
      qty = qty - 1
      reg = reg + 1 -- moving to next adjacent register
   end loop
   print_crlf(serial_hw_data)
end procedure

procedure nrf24_print_details() is

  nrf24_print_config()
  nrf24_print_en_aa()

  const byte pd00[] = "RX_ADDR_P0-1 "
  nrf24_print_address_register(pd00,NRF24_RX_ADDR_P0,2)
  const byte pd01[] = "RX_ADDR_P2-5 "
  nrf24_print_byte_register(pd01,NRF24_RX_ADDR_P2,4)
  const byte pd02[] = "TX_ADDR "
  nrf24_print_address_register(pd02,NRF24_TX_ADDR,1)
  const byte pd03[] = "RX_PW_P0-6 "
  nrf24_print_byte_register(pd03,NRF24_RX_PW_P0,6)
  const byte pd04[] = "EN_AA "
  nrf24_print_byte_register(pd04,NRF24_EN_AA,1)
  const byte pd05[] = "EN_RXADDR "
  nrf24_print_byte_register(pd05,NRF24_EN_RXADDR,1)
  const byte pd11[] = "SETUP_AW "
  nrf24_print_byte_register(pd11,NRF24_SETUP_AW,1)
  const byte pd06[] = "RF_CH "
  nrf24_print_byte_register(pd06,NRF24_RF_CH,1)
  const byte pd07[] = "RF_SETUP "
  nrf24_print_byte_register(pd07,NRF24_RF_SETUP,1)
  const byte pd08[] = "CONFIG "
  nrf24_print_byte_register(pd08,NRF24_CONFIG,1)
  const byte pd09[] = "DYNPD/FEATURE "
  nrf24_print_byte_register(pd09,NRF24_DYNPD,2)
  const byte pd10[] = "FEATURE "
  nrf24_print_byte_register(pd10,NRF24_FEATURE,1)

  nrf24_setup_retr()
  nrf24_print_rf_setup()
  nrf24_print_status()

end procedure

