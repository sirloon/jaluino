-- ------------------------------------------------------
-- Title: nRF24L01 library (wireless)
-- Author: Sebastien Lelong, Copyright (c) 2008..2013, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4p
-- Revision: $Revision: 373 $
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library can be used with Crumboard shield, and declares some
-- aliases for conveniency. It basically describe the shield with logical name.
-- (crumboard_led1 instead of pin_A0)
--
-- Sources: http://github.com/aaronds/arduino-nrf24l01/downloads
--
-- Notes: jalv2 port of MiRF lib for arduino. Greatly inspired from MiRF lib port for arduino, by
-- Aaron Shrimpton and Stefan Engelke
--
-- URL: 
--

-- -----------------
-- CONSTANTS DEFS --
-- -----------------
-- (from header file)

-- Memory Map
const byte NRF24_CONFIG_REG  = 0x00
const byte NRF24_EN_AA       = 0x01
const byte NRF24_EN_RXADDR   = 0x02
const byte NRF24_SETUP_AW    = 0x03
const byte NRF24_SETUP_RETR  = 0x04
const byte NRF24_RF_CH       = 0x05
const byte NRF24_RF_SETUP    = 0x06
const byte NRF24_STATUS      = 0x07
const byte NRF24_OBSERVE_TX  = 0x08
const byte NRF24_CD          = 0x09
const byte NRF24_RX_ADDR_P0  = 0x0A
const byte NRF24_RX_ADDR_P1  = 0x0B
const byte NRF24_RX_ADDR_P2  = 0x0C
const byte NRF24_RX_ADDR_P3  = 0x0D
const byte NRF24_RX_ADDR_P4  = 0x0E
const byte NRF24_RX_ADDR_P5  = 0x0F
const byte NRF24_TX_ADDR     = 0x10
const byte NRF24_RX_PW_P0    = 0x11
const byte NRF24_RX_PW_P1    = 0x12
const byte NRF24_RX_PW_P2    = 0x13
const byte NRF24_RX_PW_P3    = 0x14
const byte NRF24_RX_PW_P4    = 0x15
const byte NRF24_RX_PW_P5    = 0x16
const byte NRF24_FIFO_STATUS = 0x17

-- Bit Mnemonics
const byte NRF24_MASK_RX_DR  = 6
const byte NRF24_MASK_TX_DS  = 5
const byte NRF24_MASK_MAX_RT = 4
const byte NRF24_EN_CRC      = 3
const byte NRF24_CRCO        = 2
const byte NRF24_PWR_UP      = 1
const byte NRF24_PRIM_RX     = 0
const byte NRF24_ENAA_P5     = 5
const byte NRF24_ENAA_P4     = 4
const byte NRF24_ENAA_P3     = 3
const byte NRF24_ENAA_P2     = 2
const byte NRF24_ENAA_P1     = 1
const byte NRF24_ENAA_P0     = 0
const byte NRF24_ERX_P5      = 5
const byte NRF24_ERX_P4      = 4
const byte NRF24_ERX_P3      = 3
const byte NRF24_ERX_P2      = 2
const byte NRF24_ERX_P1      = 1
const byte NRF24_ERX_P0      = 0
const byte NRF24_AW          = 0
const byte NRF24_ARD         = 4
const byte NRF24_ARC         = 0
const byte NRF24_CH          = 0
const byte NRF24_CONT_WAVE   = 7
const byte NRF24_RF_DR_LOW   = 5
const byte NRF24_PLL_LOCK    = 4
const byte NRF24_RF_DR_HIGH  = 3
const byte NRF24_RF_PWR      = 1
const byte NRF24_LNA_HCURR   = 0        
const byte NRF24_RX_DR       = 6
const byte NRF24_TX_DS       = 5
const byte NRF24_MAX_RT      = 4
const byte NRF24_RX_P_NO     = 1
const byte NRF24_TX_FULL     = 0
const byte NRF24_PLOS_CNT    = 4
const byte NRF24_ARC_CNT     = 0
const byte NRF24_TX_REUSE    = 6
const byte NRF24_FIFO_FULL   = 5
const byte NRF24_TX_EMPTY    = 4
const byte NRF24_RX_FULL     = 1
const byte NRF24_RX_EMPTY    = 0

-- Instruction Mnemonics --
const byte NRF24_R_REGISTER    = 0x00
const byte NRF24_W_REGISTER    = 0x20
const byte NRF24_REGISTER_MASK = 0x1F
const byte NRF24_R_RX_PAYLOAD  = 0x61
const byte NRF24_W_TX_PAYLOAD  = 0xA0
const byte NRF24_FLUSH_TX      = 0xE1
const byte NRF24_FLUSH_RX_REG  = 0xE2
const byte NRF24_REUSE_TX_PL   = 0xE3
const byte NRF24_NOP           = 0xFF

-- Defaulting
--
-- Nrf24l settings
const byte NRF24_ADDR_LEN = 5 ; seb: was used to loop over some arrays, still useful ? (we have count() in jalv2)
const byte NRF24_CONFIG = ((1<<NRF24_EN_CRC) | (0<<NRF24_CRCO) )
;const byte NRF24_CONFIG =  (0<<NRF24_CRCO)

-- Payload width in bytes default 16 max 32
if !defined(NRF24_PAYLOAD_SIZE) then
   const byte NRF24_PAYLOAD_SIZE = 16
end if

-- Channel 0 - 127 or 0 - 84 in the US.
if !defined(NRF24_CHANNEL) then
   const byte NRF24_CHANNEL = 120
end if

-- Fool proof checks
--
-- CE Pin controls RX / TX, default 8.
if !defined(nrf24_ce_pin) then
   _error "Define nrf24_ce_pin pin alias"
end if

-- CSN Pin Chip Select Not, default 7.
if !defined(nrf24_csn_pin) then
   _error "Define nrf24_csn_pin pin alias"
end if

if !defined(NRF24_RECEIVE_ADDR) then
   _error "Define NRF24_RECEIVE_ADDR as the receiving address for this module"
end if

if !defined(spi_master_data) then
   _error "Define spi_master_data as an alias to SPI data pseudo vars (spi_master_hw or spi_master_hw2)"
end if

-- internal state: in read mode ?
var bit nrf24_ptx

-- ------
-- API --
-- ------
procedure nrf24_init()
procedure nrf24_config_register(byte in reg, byte in value)
procedure nrf24_power_up_rx()
procedure nrf24_flush_rx()
procedure nrf24_set_raddr()
procedure nrf24_write_register(byte in reg, byte in len)
procedure nrf24_transmit_sync(byte in len)
procedure nrf24_read_register(byte in reg, byte in len)
procedure nrf24_transfer_sync(byte in len)

const byte NRF24_BUFFER_LEN = 10
var volatile byte nrf24_bufout[NRF24_BUFFER_LEN]
var volatile byte nrf24_bufin[NRF24_BUFFER_LEN]

-- Initializes pins to communicate with the MiRF module
-- Should be called in the early initializing phase at startup.
procedure nrf24_init() is
   -- init buffers in/out
   var byte i
   for count(nrf24_bufin) using i loop
      nrf24_bufin[i] = 0x0F
      nrf24_bufout[i] = 0x0F
   end loop
   -- Set receiving address
   nrf24_set_raddr()
   -- Set RF channel
   nrf24_config_register(NRF24_RF_CH,NRF24_CHANNEL)
   -- Set length of incoming payload 
   nrf24_config_register(NRF24_RX_PW_P0, NRF24_PAYLOAD_SIZE)
   nrf24_config_register(NRF24_RX_PW_P1, NRF24_PAYLOAD_SIZE)
   -- Start receiver 
   nrf24_power_up_rx()
   nrf24_flush_rx()
end procedure

-- Clocks only one byte into the given MiRF register
procedure nrf24_config_register(byte in reg, byte in value) is
   nrf24_csn_pin = low
   spi_master_data = (NRF24_W_REGISTER | (NRF24_REGISTER_MASK & reg))
   spi_master_data = value
   nrf24_csn_pin = high
end procedure

procedure nrf24_power_up_rx() is
   nrf24_ptx = 0
   nrf24_ce_pin = low
   nrf24_config_register(NRF24_CONFIG_REG, NRF24_CONFIG | ( (1<<NRF24_PWR_UP) | (1<<NRF24_PRIM_RX) ) )
   nrf24_ce_pin = high
   nrf24_config_register(NRF24_STATUS,(1 << NRF24_TX_DS) | (1 << NRF24_MAX_RT)); 
end procedure

procedure nrf24_flush_rx() is
   nrf24_csn_pin = low
   spi_master_data = NRF24_FLUSH_RX_REG
   nrf24_csn_pin = high
end procedure

-- sets the receiving address
procedure nrf24_set_raddr() is
   nrf24_ce_pin = low
   var byte c = count(NRF24_RECEIVE_ADDR)
   var byte i
   for c using i loop
      nrf24_bufin[i] = NRF24_RECEIVE_ADDR[i]
   end loop
   nrf24_write_register(NRF24_RX_ADDR_P1,c)
   nrf24_ce_pin = high
end procedure

-- Writes an array of bytes into inte the MiRF registers.
procedure nrf24_write_register(byte in reg, byte in len) is
   nrf24_csn_pin = low
   spi_master_data = (NRF24_W_REGISTER | (NRF24_REGISTER_MASK & reg))
   nrf24_transmit_sync(len)
   nrf24_csn_pin = high
end procedure

procedure nrf24_transmit_sync(byte in len) is
   var byte i
   var byte c
   for len using i loop
      c = nrf24_bufin[i]
      spi_master_data = c
   end loop
end procedure


-- Reads an array of bytes from the given start position in the MiRF registers.
procedure nrf24_read_register(byte in reg, byte in len) is
   nrf24_csn_pin = low
   spi_master_data = (NRF24_R_REGISTER | (NRF24_REGISTER_MASK & reg))
   nrf24_transfer_sync(len)
   nrf24_csn_pin = high
   ;const byte str[] = "bufout[O]:"
   ;print_string(serial_hw_data,str)
   ;print_byte_bin(serial_hw_data,nrf24_bufout[0])
   ;print_crlf(serial_hw_data)
end procedure

procedure nrf24_transfer_sync(byte in len) is
   var byte i = 0
   -- assuming dataout/datein have same size
   ;serial_hw_data = "i"
   ;serial_hw_data = i + "0"

   nrf24_bufout[0] = 0x00

   for len loop
      ;serial_hw_data = i + "0"
      ;serial_hw_data = " "
      nrf24_bufout[i] = spi_master_hw2_exchange(nrf24_bufin[i])
      ;const byte str[] = "xfer bufout[i]:"
      ;print_string(serial_hw_data,str)
      ;print_byte_bin(serial_hw_data,nrf24_bufout[i])
      ;print_crlf(serial_hw_data)
      i = i + 1
   end loop
   ;const byte str[] = "xfer bufout[0]:"
   ;print_string(serial_hw_data,str)
   ;print_byte_bin(serial_hw_data,nrf24_bufout[0])
   ;print_crlf(serial_hw_data)
end procedure

;void send(uint8_t *value);
;void setRADDR(uint8_t * adr);
;void setTADDR(uint8_t * adr);
;bool dataReady();
;bool isSending();
;bool rxFifoEmpty();
;bool txFifoEmpty();
;void getData(uint8_t * data);
;uint8_t getStatus();
;
;void transmitSync(uint8_t *dataout,uint8_t len);
;void transferSync(uint8_t *dataout,uint8_t *datain,uint8_t len);
;void configRegister(uint8_t reg, uint8_t value);
;void readRegister(uint8_t reg, uint8_t * value, uint8_t len);
;void writeRegister(uint8_t reg, uint8_t * value, uint8_t len);
;void powerUpRx();
;void powerUpTx();
;void powerDown();
;
;void flushRx();

