-- ------------------------------------------------------
-- Title: nRF24L01 library (wireless)
-- Author: Sebastien Lelong, Copyright (c) 2008..2013, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4p
-- Revision: $Revision: 373 $
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this library can be used with Crumboard shield, and declares some
-- aliases for conveniency. It basically describe the shield with logical name.
-- (crumboard_led1 instead of pin_A0)
--
-- Sources: http://github.com/aaronds/arduino-nrf24l01/downloads
--
-- Notes: jalv2 port of MiRF lib for arduino. Greatly inspired from MiRF lib port for arduino, by
-- Aaron Shrimpton and Stefan Engelke
--
-- URL: 
--

-- -----------------
-- CONSTANTS DEFS --
-- -----------------
-- (from header file)

-- Memory Map
const byte NRF24_CONFIG_REG  = 0x00
const byte NRF24_EN_AA       = 0x01
const byte NRF24_EN_RXADDR   = 0x02
const byte NRF24_SETUP_AW    = 0x03
const byte NRF24_SETUP_RETR  = 0x04
const byte NRF24_RF_CH       = 0x05
const byte NRF24_RF_SETUP    = 0x06
const byte NRF24_STATUS      = 0x07
const byte NRF24_OBSERVE_TX  = 0x08
const byte NRF24_CD          = 0x09
const byte NRF24_RX_ADDR_P0  = 0x0A
const byte NRF24_RX_ADDR_P1  = 0x0B
const byte NRF24_RX_ADDR_P2  = 0x0C
const byte NRF24_RX_ADDR_P3  = 0x0D
const byte NRF24_RX_ADDR_P4  = 0x0E
const byte NRF24_RX_ADDR_P5  = 0x0F
const byte NRF24_TX_ADDR     = 0x10
const byte NRF24_RX_PW_P0    = 0x11
const byte NRF24_RX_PW_P1    = 0x12
const byte NRF24_RX_PW_P2    = 0x13
const byte NRF24_RX_PW_P3    = 0x14
const byte NRF24_RX_PW_P4    = 0x15
const byte NRF24_RX_PW_P5    = 0x16
const byte NRF24_FIFO_STATUS = 0x17

-- Bit Mnemonics
const byte NRF24_MASK_RX_DR  = 6
const byte NRF24_MASK_TX_DS  = 5
const byte NRF24_MASK_MAX_RT = 4
const byte NRF24_EN_CRC      = 3
const byte NRF24_CRCO        = 2
const byte NRF24_PWR_UP      = 1
const byte NRF24_PRIM_RX     = 0
const byte NRF24_ENAA_P5     = 5
const byte NRF24_ENAA_P4     = 4
const byte NRF24_ENAA_P3     = 3
const byte NRF24_ENAA_P2     = 2
const byte NRF24_ENAA_P1     = 1
const byte NRF24_ENAA_P0     = 0
const byte NRF24_ERX_P5      = 5
const byte NRF24_ERX_P4      = 4
const byte NRF24_ERX_P3      = 3
const byte NRF24_ERX_P2      = 2
const byte NRF24_ERX_P1      = 1
const byte NRF24_ERX_P0      = 0
const byte NRF24_AW          = 0
const byte NRF24_ARD         = 4
const byte NRF24_ARC         = 0
const byte NRF24_CH          = 0
const byte NRF24_CONT_WAVE   = 7
const byte NRF24_RF_DR_LOW   = 5
const byte NRF24_PLL_LOCK    = 4
const byte NRF24_RF_DR_HIGH  = 3
const byte NRF24_RF_PWR      = 1
const byte NRF24_LNA_HCURR   = 0        
const byte NRF24_RX_DR       = 6
const byte NRF24_TX_DS       = 5
const byte NRF24_MAX_RT      = 4
const byte NRF24_RX_P_NO     = 1
const byte NRF24_TX_FULL     = 0
const byte NRF24_PLOS_CNT    = 4
const byte NRF24_ARC_CNT     = 0
const byte NRF24_TX_REUSE    = 6
const byte NRF24_FIFO_FULL   = 5
const byte NRF24_TX_EMPTY    = 4
const byte NRF24_RX_FULL     = 1
const byte NRF24_RX_EMPTY    = 0

-- Instruction Mnemonics --
const byte NRF24_R_REGISTER    = 0x00
const byte NRF24_W_REGISTER    = 0x20
const byte NRF24_REGISTER_MASK = 0x1F
const byte NRF24_R_RX_PAYLOAD  = 0x61
const byte NRF24_W_TX_PAYLOAD  = 0xA0
const byte NRF24_FLUSH_TX      = 0xE1
const byte NRF24_FLUSH_RX_REG  = 0xE2
const byte NRF24_REUSE_TX_PL   = 0xE3
const byte NRF24_NOP           = 0xFF

-- Defaulting
--
-- Nrf24l settings
const byte NRF24_ADDR_LEN = 5 ; seb: was used to loop over some arrays, still useful ? (we have count() in jalv2)
const byte NRF24_CONFIG = ((1<<NRF24_EN_CRC) | (0<<NRF24_CRCO) )
;const byte NRF24_CONFIG =  (0<<NRF24_CRCO)

-- Payload width in bytes default 16 max 32
if !defined(NRF24_PAYLOAD_SIZE) then
   const byte NRF24_PAYLOAD_SIZE = 16
end if

-- Channel 0 - 127 or 0 - 84 in the US.
if !defined(NRF24_CHANNEL) then
   const byte NRF24_CHANNEL = 120
end if

-- Fool proof checks
--
-- CE Pin controls RX / TX, default 8.
if !defined(nrf24_ce_pin) then
   _error "Define nrf24_ce_pin pin alias"
end if

-- CSN Pin Chip Select Not, default 7.
if !defined(nrf24_csn_pin) then
   _error "Define nrf24_csn_pin pin alias"
end if

if !defined(NRF24_RECEIVE_ADDR) then
   _error "Define NRF24_RECEIVE_ADDR as the receiving address for this module"
end if

if !defined(spi_master_data) then
   _error "Define spi_master_data as an alias to SPI data pseudo vars (spi_master_hw or spi_master_hw2)"
end if

-- internal state: in read mode ?
var bit nrf24_ptx

-- ------
-- API --
-- ------
procedure nrf24_init()
procedure nrf24_config_register(byte in reg, byte in value)
procedure nrf24_power_up_rx()
procedure nrf24_flush_rx()
procedure nrf24_set_raddr()
procedure nrf24_write_register(byte in reg, byte in len)
procedure nrf24_transmit_sync(byte in len)
procedure nrf24_read_register(byte in reg, byte in len)
procedure nrf24_transfer_sync(byte in len)
procedure nrf24_send(byte in value)
function nrf24_get_status() return byte
procedure nrf24_power_up_tx()
function nrf24_rx_fifo_empty() return bit

const byte NRF24_BUFFER_LEN = 10
var volatile byte nrf24_bufout[NRF24_BUFFER_LEN]
var volatile byte nrf24_bufin[NRF24_BUFFER_LEN]

-- Initializes pins to communicate with the MiRF module
-- Should be called in the early initializing phase at startup.
procedure nrf24_init() is
   -- init buffers in/out
   var byte i
   for count(nrf24_bufin) using i loop
      nrf24_bufin[i] = 0x0F
      nrf24_bufout[i] = 0x0F
   end loop
   -- Set receiving address
   nrf24_set_raddr()
   -- Set RF channel
   nrf24_config_register(NRF24_RF_CH,NRF24_CHANNEL)
   -- Set length of incoming payload 
   nrf24_config_register(NRF24_RX_PW_P0, NRF24_PAYLOAD_SIZE)
   nrf24_config_register(NRF24_RX_PW_P1, NRF24_PAYLOAD_SIZE)
   -- Start receiver 
   nrf24_power_up_rx()
   nrf24_flush_rx()
end procedure

-- Clocks only one byte into the given MiRF register
procedure nrf24_config_register(byte in reg, byte in value) is
   nrf24_csn_pin = low
   spi_master_data = (NRF24_W_REGISTER | (NRF24_REGISTER_MASK & reg))
   spi_master_data = value
   nrf24_csn_pin = high
end procedure

procedure nrf24_power_up_rx() is
   nrf24_ptx = 0
   nrf24_ce_pin = low
   nrf24_config_register(NRF24_CONFIG_REG, NRF24_CONFIG | ( (1<<NRF24_PWR_UP) | (1<<NRF24_PRIM_RX) ) )
   nrf24_ce_pin = high
   nrf24_config_register(NRF24_STATUS,(1 << NRF24_TX_DS) | (1 << NRF24_MAX_RT)); 
end procedure

procedure nrf24_flush_rx() is
   nrf24_csn_pin = low
   spi_master_data = NRF24_FLUSH_RX_REG
   nrf24_csn_pin = high
end procedure

-- sets the receiving address
procedure nrf24_set_raddr() is
   nrf24_ce_pin = low
   var byte c = count(NRF24_RECEIVE_ADDR)
   var byte i
   for c using i loop
      nrf24_bufin[i] = NRF24_RECEIVE_ADDR[i]
   end loop
   nrf24_write_register(NRF24_RX_ADDR_P1,c)
   nrf24_ce_pin = high
end procedure

-- Writes an array of bytes into inte the MiRF registers.
procedure nrf24_write_register(byte in reg, byte in len) is
   nrf24_csn_pin = low
   spi_master_data = (NRF24_W_REGISTER | (NRF24_REGISTER_MASK & reg))
   nrf24_transmit_sync(len)
   nrf24_csn_pin = high
end procedure

procedure nrf24_transmit_sync(byte in len) is
   var byte i
   var byte c
   for len using i loop
      c = nrf24_bufin[i]
      spi_master_data = c
   end loop
end procedure


-- Reads an array of bytes from the given start position in the MiRF registers.
procedure nrf24_read_register(byte in reg, byte in len) is
   nrf24_csn_pin = low
   spi_master_data = (NRF24_R_REGISTER | (NRF24_REGISTER_MASK & reg))
   nrf24_transfer_sync(len)
   nrf24_csn_pin = high
end procedure

procedure nrf24_transfer_sync(byte in len) is
   var byte i = 0
   nrf24_bufout[0] = 0x00
   
   for len loop
      nrf24_bufout[i] = spi_master_hw2_exchange(nrf24_bufin[i])
      i = i + 1
   end loop
end procedure

-- Sends a data package to the default address. Be sure to send the correct
-- amount of bytes as configured as payload on the receiver.
procedure nrf24_send(byte in value) is
   
   var byte st = nrf24_get_status()
   while nrf24_ptx == 1 loop
      st = nrf24_get_status()
      if (st & ((1 << NRF24_TX_DS) | (1 << NRF24_MAX_RT))) == true then
         nrf24_ptx = 0
         exit loop
      end if
   end loop
   
   nrf24_ce_pin = low
   nrf24_power_up_tx()
   nrf24_csn_pin = low
   
   spi_master_data = NRF24_FLUSH_TX 
   nrf24_csn_pin = high
   delay_1ms(1) ; delete ?
   nrf24_csn_pin = low
   
   spi_master_data = NRF24_W_TX_PAYLOAD
   -- Write payload
   nrf24_bufin[0] = value
   -- TODO: I could send multiple byte at a time
   nrf24_transmit_sync(1)
   
   -- Pull up chip select
   nrf24_csn_pin = high
   -- Start transmission
   nrf24_ce_pin = high
   
end procedure

function nrf24_get_status() return byte is
   var byte rv
   nrf24_read_register(STATUS,1)
   rv = nrf24_bufout[0]
   return rv
end function

procedure nrf24_power_up_tx() is
   nrf24_ptx = 1
   nrf24_config_register(NRF24_CONFIG_REG, NRF24_CONFIG | ( (1<<NRF24_PWR_UP) | (0<<NRF24_PRIM_RX) ) )
end procedure

procedure nrf24_power_down() is
   nrf24_ce_pin = low
   nrf24_config_register(NRF24_CONFIG_REG, NRF24_CONFIG)
end procedure

-- Test if chip is still sending.
-- When sending has finished return chip to listening.
function nrf24_is_sending() return bit is
   var byte st
   
   if nrf24_ptx == 1 then
      st = nrf24_get_status()
      -- if sending successful (TX_DS) or max retries exceded (MAX_RT).
      if (st & ((1 << NRF24_TX_DS)  | (1 << NRF24_MAX_RT))) != 0 then
         nrf24_power_up_rx()
         return false
      end if
      return true
   end if
   
   return false
   
end function

-- Checks if data is available for reading
function nrf24_data_ready() return bit is
   -- See note in nrf24_get_data() function - just checking RX_DR isn't good enough
   var byte st  = nrf24_get_status()
   
   -- We can short circuit on RX_DR, but if it's not set, we still need
   -- to check the FIFO for any pending packets
   if (st & (1 << NRF24_RX_DR)) != 0 then
      return true
   end if
   return !nrf24_rx_fifo_empty()
   
end function

function nrf24_rx_fifo_empty() return bit is
   var byte fifostatus
   nrf24_read_register(NRF24_FIFO_STATUS,1)
   fifostatus = nrf24_bufout[0]
   return (fifostatus & (1 << NRF24_RX_EMPTY))
end function

-- Reads payload bytes into data array
procedure nrf24_get_data() is
   nrf24_csn_pin = low -- Pull down chip select
   spi_master_data = NRF24_R_RX_PAYLOAD -- Send cmd to read rx payload
   nrf24_transfer_sync(NRF24_PAYLOAD_SIZE)
   nrf24_csn_pin = high -- Pull up chip select
   -- NVI: per product spec, p 67, note c:
   --  "The RX_DR IRQ is asserted by a new packet arrival event. The procedure
   --  for handling this interrupt should be: 1) read payload through SPI,
   --  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
   --  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
   --  repeat from step 1)."
   -- So if we're going to clear RX_DR here, we need to check the RX FIFO
   -- in the dataReady() function
   nrf24_config_register(NRF24_STATUS,(1<<NRF24_RX_DR)) -- Reset status register
end procedure

-- Sets the transmitting address
procedure nrf24_set_taddr(byte in adr[]) is
   -- load input buffer (to send to NRF24)
   -- /!\ assuming adr is adr[NRF24_ADDR_LEN]
   var byte i = 0
   for NRF24_ADDR_LEN loop
      nrf24_bufin[i] = adr[i]
      i = i + 1
   end loop
   -- RX_ADDR_P0 must be set to the sending addr for auto ack to work.
   nrf24_write_register(NRF24_RX_ADDR_P0,NRF24_ADDR_LEN)
   nrf24_write_register(NRF24_TX_ADDR,NRF24_ADDR_LEN)
end procedure

procedure nrf24_print_registers() is
   nrf24_read_register(NRF24_CONFIG_REG,1)
   var byte config = nrf24_bufout[0]
   const byte str00[] = "CONFIG: "
   print_string(serial_hw_data,str00)
   print_byte_bin(serial_hw_data,config)
   serial_hw_data = ","
   print_byte_bin(serial_hw_data,nrf24_bufout[0])
   print_crlf(serial_hw_data)
   const byte str2[] = "  MASK_RX_DR[6] : "
   print_string(serial_hw_data,str2)
   print_byte_bin(serial_hw_data,(config >> NRF24_MASK_RX_DR) & 1)
   print_crlf(serial_hw_data)
   const byte str3[] = "  MASK_TX_DS[5] : "
   print_string(serial_hw_data,str3)
   print_byte_bin(serial_hw_data,(config >> NRF24_MASK_TX_DS) & 1)
   print_crlf(serial_hw_data)
   const byte str4[] = "  MASK_MAX_RT[4]: "
   print_string(serial_hw_data,str4)
   print_byte_bin(serial_hw_data,(config >> NRF24_MASK_MAX_RT) & 1)
   print_crlf(serial_hw_data)
   const byte str5[] = "  EN_CRC[3]     : "
   print_string(serial_hw_data,str5)
   print_byte_bin(serial_hw_data,(config >> NRF24_EN_CRC) & 1)
   print_crlf(serial_hw_data)
   const byte str6[] = "  CRCO[2]       : "
   print_string(serial_hw_data,str6)
   print_byte_bin(serial_hw_data,(config >> NRF24_CRCO) & 1)
   print_crlf(serial_hw_data)
   const byte str7[] = "  PWR_UP[1]     : "
   print_string(serial_hw_data,str7)
   print_byte_bin(serial_hw_data,(config >> NRF24_PWR_UP) & 1)
   print_crlf(serial_hw_data)
   const byte str8[] = "  PRIM_RX[0]    : "
   print_string(serial_hw_data,str8)
   print_byte_bin(serial_hw_data,(config >> NRF24_PWR_UP) & 1)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   
   nrf24_read_register(NRF24_EN_AA,1)
   var byte en_aa = nrf24_bufout[0]
   const byte str9[] = "EN_AA: "
   print_string(serial_hw_data,str9)
   print_byte_bin(serial_hw_data,en_aa)
   print_crlf(serial_hw_data)
   const byte str10[] = "  ENAA_P5[5] : "
   print_string(serial_hw_data,str10)
   print_byte_bin(serial_hw_data,(en_aa >> NRF24_ENAA_P5) & 1)
   print_crlf(serial_hw_data)
   const byte str11[] = "  ENAA_P4[4] : "
   print_string(serial_hw_data,str11)
   print_byte_bin(serial_hw_data,(en_aa >> NRF24_ENAA_P4) & 1)
   print_crlf(serial_hw_data)
   const byte str12[] = "  ENAA_P3[3] : "
   print_string(serial_hw_data,str12)
   print_byte_bin(serial_hw_data,(en_aa >> NRF24_ENAA_P3) & 1)
   print_crlf(serial_hw_data)
   const byte str13[] = "  ENAA_P2[2] : "
   print_string(serial_hw_data,str13)
   print_byte_bin(serial_hw_data,(en_aa >> NRF24_ENAA_P2) & 1)
   print_crlf(serial_hw_data)
   const byte str14[] = "  ENAA_P1[1] : "
   print_string(serial_hw_data,str14)
   print_byte_bin(serial_hw_data,(en_aa >> NRF24_ENAA_P1) & 1)
   print_crlf(serial_hw_data)
   const byte str15[] = "  ENAA_P0[0] : "
   print_string(serial_hw_data,str15)
   print_byte_bin(serial_hw_data,(en_aa >> NRF24_ENAA_P0) & 1)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   nrf24_read_register(NRF24_EN_RXADDR,1)
   var byte en_rxaddr = nrf24_bufout[0]
   const byte str16[] = "EN_RXADDR: "
   print_string(serial_hw_data,str16)
   print_byte_bin(serial_hw_data,en_rxaddr)
   print_crlf(serial_hw_data)
   const byte str17[] = "  ERX_P5[5] : "
   print_string(serial_hw_data,str17)
   print_byte_bin(serial_hw_data,(en_rxaddr >> NRF24_ERX_P5) & 1)
   print_crlf(serial_hw_data)
   const byte str18[] = "  ERX_P4[4] : "
   print_string(serial_hw_data,str18)
   print_byte_bin(serial_hw_data,(en_rxaddr >> NRF24_ERX_P4) & 1)
   print_crlf(serial_hw_data)
   const byte str19[] = "  ERX_P3[3] : "
   print_string(serial_hw_data,str19)
   print_byte_bin(serial_hw_data,(en_rxaddr >> NRF24_ERX_P3) & 1)
   print_crlf(serial_hw_data)
   const byte str20[] = "  ERX_P2[2] : "
   print_string(serial_hw_data,str20)
   print_byte_bin(serial_hw_data,(en_rxaddr >> NRF24_ERX_P2) & 1)
   print_crlf(serial_hw_data)
   const byte str21[] = "  ERX_P1[1] : "
   print_string(serial_hw_data,str21)
   print_byte_bin(serial_hw_data,(en_rxaddr >> NRF24_ERX_P1) & 1)
   print_crlf(serial_hw_data)
   const byte str22[] = "  ERX_P0[0] : "
   print_string(serial_hw_data,str22)
   print_byte_bin(serial_hw_data,(en_rxaddr >> NRF24_ERX_P0) & 1)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   nrf24_read_register(NRF24_SETUP_AW,1)
   var byte setup_aw = nrf24_bufout[0]
   const byte str23[] = "SETUP_AW: "
   print_string(serial_hw_data,str23)
   print_byte_bin(serial_hw_data,setup_aw)
   print_crlf(serial_hw_data)
   const byte str24[] = "  AW[0-1] : "
   print_string(serial_hw_data,str24)
   print_byte_bin(serial_hw_data,(setup_aw >> NRF24_AW) & 1)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   nrf24_read_register(NRF24_SETUP_RETR,1)
   var byte setup_retr = nrf24_bufout[0]
   const byte str25[] = "SETUP_RETR: "
   print_string(serial_hw_data,str25)
   print_byte_bin(serial_hw_data,setup_retr)
   print_crlf(serial_hw_data)
   const byte str26[] = "  ARD[4-7] : "
   print_string(serial_hw_data,str26)
   print_byte_bin(serial_hw_data,(setup_retr >> NRF24_ARD) & 1)
   print_crlf(serial_hw_data)
   const byte str27[] = "  ARC[0-3] : "
   print_string(serial_hw_data,str27)
   print_byte_bin(serial_hw_data,(setup_retr >> NRF24_ARC) & 1)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   nrf24_read_register(NRF24_RF_CH,1)
   var byte rf_ch = nrf24_bufout[0]
   const byte str28[] = "RF_CH: "
   print_string(serial_hw_data,str28)
   print_byte_bin(serial_hw_data,rf_ch)
   print_crlf(serial_hw_data)
   const byte str29[] = "  RF_CH[0-6] : "
   print_string(serial_hw_data,str29)
   print_byte_bin(serial_hw_data,rf_ch)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   nrf24_read_register(NRF24_RF_SETUP,1)
   var byte rf_setup = nrf24_bufout[0]
   const byte str30[] = "RF_SETUP: "
   print_string(serial_hw_data,str30)
   print_byte_bin(serial_hw_data,rf_setup)
   print_crlf(serial_hw_data)
   const byte str31[] = "  CONT_WAVE[7]  : "
   print_string(serial_hw_data,str31)
   print_byte_bin(serial_hw_data,(rf_setup >> NRF24_CONT_WAVE) & 1)
   print_crlf(serial_hw_data)
   const byte str32[] = "  RF_DR_LOW[5]  : "
   print_string(serial_hw_data,str32)
   print_byte_bin(serial_hw_data,(rf_setup >> NRF24_RF_DR_LOW) & 1)
   print_crlf(serial_hw_data)
   const byte str33[] = "  PLL_LOCK[4]   : "
   print_string(serial_hw_data,str33)
   print_byte_bin(serial_hw_data,(rf_setup >> NRF24_PLL_LOCK) & 1)
   print_crlf(serial_hw_data)
   const byte str34[] = "  RF_DR_HIGH[3] : "
   print_string(serial_hw_data,str34)
   print_byte_bin(serial_hw_data,(rf_setup >> NRF24_RF_DR_HIGH) & 1)
   print_crlf(serial_hw_data)
   const byte str35[] = "  RF_PWR[1-2]   : "
   print_string(serial_hw_data,str35)
   print_byte_bin(serial_hw_data,(rf_setup >> NRF24_RF_PWR) & 0b11)
   print_crlf(serial_hw_data)
   print_crlf(serial_hw_data)
   
   nrf24_read_register(NRF24_RX_ADDR_P1,count(NRF24_RECEIVE_ADDR))
   const byte str36[] = "NRF24_RX_ADDR_P1: "
   print_string(serial_hw_data,str36)
   var byte i = 0
   for count(NRF24_RECEIVE_ADDR) loop
      var byte c = nrf24_bufout[i]
      print_byte_hex(serial_hw_data,c)
      serial_hw_data = c + "0"
      serial_hw_data = ","
      i = i + 1
   end loop
   print_crlf(serial_hw_data)
   
end procedure
