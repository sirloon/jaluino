-- ------------------------------------------------------
-- Title: Jaluino Bee device file (wrapper over 18f27j53.jal)
-- Author: Sebastien Lelong, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4n
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this is the main file included in every jaluino project
-- that uses Jaluino Bee hardware. Jaluino Bee is based on PIC 18F27J53.
-- This files performs basic setup to configure PIC, like setting clock speed
-- to 48MHz, disable watchdog, etc...
-- --
-- The idea is you just have to type "include jaluino_bee" and your chip
-- is configured and ready to be used !
-- Prior including this lib, more configuration can be performed, particularly
-- setting the following constant to 1:
--    * JALUINO_SKIP_PINMAP : won't create pin aliases, like "onboard_led"
--    * ENABLE_MSSP2_SDCARD : will configure PPS module for MSSP2 usage,
--                            in order to use SD-Card
--
-- Sources:
--
-- Notes:
--

include 18f27j53
pragma target clock 48_000_000   -- oscillator frequency
-- magical statements
pragma target PLLDIV	   P4
pragma target CPUDIV	   P1
pragma target PLLEN  P1          -- PLL via fuse turned off
pragma target OSC	   HS_PLL
pragma target WDT  disabled      -- no watchdog
pragma target IOL1WAY disabled   -- Mapping allowed multiple time at runtime
OSCTUNE_PLLEN = on               -- PLL via OSCTUNE enabled
-- declare secondary oscillator on T1OSI/T1OSO pins
pragma target RTCOSC T1OSC
pragma target SOSCSEL HS_CP
_usec_delay(2000) -- PLL needs 2ms before stable

enable_digital_io()

-- Include official pin mapping. Since it's arbitrary, one may want to bypass it
-- and provides his own mapping, defining the following constant.
if defined(JALUINO_SKIP_PINMAP) == false then
   include jaluino_bee_pinmap
end if


include pps

-- Configure Remappable Pins on MSSP2 to match SPI/SD-Card wiring,
-- configure MSSP2 and initialize SD-card library
if defined(ENABLE_MSSP2_SDCARD) then

   -- PPS module writes are protected, we need to first unlock it
   pps_control_lock(false)
   -- RP3 <-> /SS2
   PPS_MAP_SS2IN = RP3
   -- RP2 <-> SCK2
   PPS_MAP_RP2 = PPS_SCK2
   PPS_MAP_SCK2IN = RP2
   -- RP5 <-> SDI2
   PPS_MAP_SDI2 = RP5
   -- RP6 <-> SDO2
   PPS_MAP_RP6 = PPS_SDO2
   -- PPS configuration is done, we can lock again
   pps_control_lock(true)

   alias pin_ss2_direction is pin_b0_direction
   alias pin_ss2 is pin_b0
   alias pin_sdi2_direction is pin_b2_direction
   alias pin_sdo2_direction is pin_b3_direction
   alias pin_sck2_direction is pin_a5_direction

   -- configure SPI to use MSSP2 module
   include spi_master_hw2
   pin_sdi2_direction = input    -- spi input
   pin_sdo2_direction = output   -- spi output
   pin_sck2_direction = output   -- spi clock
   spi2_init(SPI_MODE_11,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
   
   -- setup the sd card SPI "Slave Select" pin
   alias sd_chip_select is pin_ss2
   alias sd_chip_select_direction is pin_ss2_direction
   sd_chip_select_direction = output
   sd_chip_select = high

   -- Aliases used for generic access for SD-card, pointing to MSSP2 related procedures
   alias spi_master_set_mode is spi_master_hw2_set_mode
   alias spi_master_set_speed is spi_master_hw2_set_speed

   -- setup the sd card library
   ;const bit SD_EXTRA_SPEED = TRUE
   const bit SD_ALWAYS_SET_SPI_MODE = TRUE
   const bit SD_DELAY_AFTER_WRITE = TRUE
   -- define which data carrier to use to access sd-card
   alias spi_master is spi_master_hw2
   include sd_card
   sd_init()
   
end if

-- that's all, PIC is ready !

