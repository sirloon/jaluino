#!/bin/bash
#
#
# Title: jaluino executable for linux systems, aimed to be used with SVN repository
# Author: Sebastien Lelong, Copyright (c) 2008, all rights reserved.
# Adapted-by:
# Compiler:
# 
# This file is part of jallib (http://jallib.googlecode.com)
# Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
#
# Sources:
# 
# Description: the aim of this script is to ease user's life !
# If *you* are a user, edit (or copy) this script by specfiying the following
# environment variables. These variables will save you some typing
# while using the jallib wrapper script. Adapt it to your own need !
# Once done, you can put this script in your path.
# Rem: usually, setting JALLIB_ROOT as an absolute path is enough.
# 

# launch location
ABSRELPATH=`dirname $0`

if echo $ABSRELPATH | grep -q ^/
then
    RUNFROM=$ABSRELPATH
else
    RUNFROM="`pwd`/`dirname $0`"
fi


export JALLIB_PYTHON=python
if [ "$PYTHON_EXEC" != "" ]
then
   export JALLIB_PYTHON=$PYTHON_EXEC
fi



#########################
# ENVIRONMENT VARIABLES #
#########################
export JALUINO_ROOT="$RUNFROM/.."
# Path to the jallib root's repository (containing "tools", "samples", "lib", "3rdparty", ...)
# guess if running from SVN or from release package
# Note: this won't work when "svn export"
if test -d "$RUNFROM/.svn" 
then
    export JALLIB_ROOT="$RUNFROM/../3rdparty/jallib_svn"
else
    export JALLIB_ROOT=$JALUINO_ROOT
fi

# path to jallib root's samples.
export JALLIB_SAMPLEDIR=$JALUINO_ROOT/samples
# path to jallib root's libraries.
if [ "$JALLIB_REPOS" = "" ]
then
    export JALLIB_REPOS=$JALUINO_ROOT/lib:$JALLIB_ROOT/include
fi
# path to "jalv2" executable. If not in your PATH, set an absolute path to the exec
if [ "$JALLIB_JALV2" = "" ]
then
    export JALLIB_JALV2="$JALLIB_ROOT/compiler/jalv2"
fi

####################
# UPLOADER OPTIONS #
####################

# Select which method to use to upload your program
# You can set: "tiny", "pdfusb", "xwisp"
if [ "$JALUINO_UPLOADER" = "" ]
then
    JALUINO_UPLOADER="pdfusb"
fi
# Set where Jaluino is plugged
JALUINO_SERIAL="/dev/ttyUSB0"

case $JALUINO_UPLOADER in
    tiny)
        export JALLIB_JALV2_ARGS="-loader18 4"
        export JALUINO_UPLOAD_CMD="$JALUINO_ROOT/bin/tinybld2 -s 115200 -p $JALUINO_SERIAL "
        ;;
    pdfusb)
        export JALLIB_JALV2_ARGS="-loader18 2048 -no-fuse"
        export JALUINO_UPLOAD_CMD="$JALLIB_PYTHON $JALUINO_ROOT/bootloaders/pdfusb/hostapp/UsbBootLoader.py -x write "
        ;;
    xwisp)
        echo "not implemented"
        ;;
    *)
        export JALLIB_JALV2_ARGS=""
        export JALUINO_UPLOAD_CMD=""
        ;;
esac

########
# Main #
########

# Either running from GUI, or cmd line
# - GUI: delegate all commandline generation with args
# - cmdline: use what's defined here
if [ "$JALUINO_LAUNCH_FILE" = "" ] # only defined when using GUI
then
    echo -n "Jaluino wrapper, action:$1, uploader:$JALUINO_UPLOADER, args:'$JALLIB_JALV2_ARGS' "
    # bypass some specific actions not handled by jallib.py
    case "$1" in
        upload)
            hex=`echo "$2" | sed "s#\.jal\\$#.hex#"`
            echo "file: $hex"
            $JALUINO_UPLOAD_CMD $hex
            ;;
        compile)
            echo "file: $2"
            $JALLIB_PYTHON $JALLIB_ROOT/tools/jallib.py compile $JALLIB_JALV2_ARGS $2 $3 $4 $5 $6 $7 $8 $9
            ;;
        *)
            echo "file: $2"
            $JALLIB_PYTHON $JALLIB_ROOT/tools/jallib.py $*
            ;;
    esac
else
    $JALLIB_PYTHON $JALLIB_ROOT/tools/jallib.py $*
fi

