<!-- Editra XML Interface Specification -->
<!-- Editra Xml can be used to customize or add new syntax highlighting -->
 
<!-- Opening tag
version attribute used to tell Editra the file has changed since last load
-->
<editra version="1">
 
    <!-- Specifies a syntax module and lexer
    lang attribute specifies the filetypes name
    lexer attribute specifies the scintilla lexer to use
    -->
    <syntax language="Jalv2" lexer="STC_LEX_MSSQL" id="ID_LANG_JAL">
        <!-- File Extension Associations. Value is just a space separated
                 list of file extensions. No Dots.
        -->
        <associations value="jal"/>
        <!-- KeywordList must be a child of syntax it specifies the keywords
        used by the language.
        -->
        <keywordlist>
            <!-- std keywords -->
            <keywords value="0">
                 if then else elsif forever for loop case of end block using 
                 alias function procedure is return repeat until asm assembler
                 break task suspend exit
            </keywords>

            <keywords value="1">
                 var const
                 off on high low input output true false enabled disabled all_input all_output 
            </keywords>

            <keywords value="2">
                volatile bit byte word dword sbyte sword sdword 
            </keywords>

            <keywords value="4">
                 include defined 
            </keywords>

            <keywords value="5">
                 _usec_delay _debug _warn _error count 
            </keywords>

            <keywords value="6">
                 pragma target clock interrupt inline fuses
            </keywords>



        </keywordlist>
 
        <!-- SyntaxSpecList must be a child of syntax and it specifies how the
        text is to be styled. For built in lexers the value attribute should be
        a constant used for the set lexer. For custom lexers it should be an
        integer that specifies the custom style id. The tag attribute specifies
        the style used by Editra's internal styling system to highlight the text
        -->
        <syntaxspeclist>

            <syntaxspec value="STC_MSSQL_DEFAULT" tag="default_style"/>
            <syntaxspec value="STC_MSSQL_COMMENT" tag="comment_style"/>
            <syntaxspec value="STC_MSSQL_COLUMN_NAME" tag="string_style"/>
            <syntaxspec value="STC_MSSQL_COLUMN_NAME_2" tag="char_style"/>
            <syntaxspec value="STC_MSSQL_DATATYPE" tag="keyword2_style"/>
            <syntaxspec value="STC_MSSQL_DEFAULT_PREF_DATATYPE" tag="class_style"/>
            <syntaxspec value="STC_MSSQL_FUNCTION" tag="keyword3_style"/>
            <syntaxspec value="STC_MSSQL_GLOBAL_VARIABLE" tag="global_style"/>
            <syntaxspec value="STC_MSSQL_IDENTIFIER" tag="default_style"/>
            <syntaxspec value="STC_MSSQL_LINE_COMMENT" tag="comment_style"/>
            <syntaxspec value="STC_MSSQL_NUMBER" tag="number_style"/>
            <syntaxspec value="STC_MSSQL_OPERATOR" tag="operator_style"/>
            <syntaxspec value="STC_MSSQL_STATEMENT" tag="keyword_style"/>
            <syntaxspec value="STC_MSSQL_STORED_PROCEDURE" tag="scalar2_style"/>
            <syntaxspec value="STC_MSSQL_STRING" tag="char_style"/>
            <syntaxspec value="STC_MSSQL_SYSTABLE" tag="keyword4_style"/>
            <syntaxspec value="STC_MSSQL_VARIABLE" tag="scalar_style"/>



        </syntaxspeclist>
 
        <!-- PropertyList specifies additional properties for folding --> 
        <propertylist>
             <!--property value="fold" enable="1"/-->
             <!--property value="tab.timmy.whinge.level" enable="1"/-->
        </propertylist>

 
        <!-- Specifies the comment pattern
        value attribute should be a space separated list of characters that make
        up the pattern for the comment.
        -->
        <commentpattern value="--"/>
 
        <!-- FeatureList is used to specify extension features to override
        builtin functionality.
        method attribute is used to specify the name of the method that has
        an implementation available.
        source attribute specifies the relative path to where the implementation
        can be found
 
        Current Method features that can be implemented
        AutoIndenter: AutoIndenter(stc, pos, ichar)
        StyleText: StyleText(stc, start, end)
 
        -->
        <!--
        <featurelist>
            <feature method="AutoIndenter" source="myextension.py"/>
        </featurelist>
        -->
 
    </syntax>
</editra>
