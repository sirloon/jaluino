#!/usr/bin/env python

import os, sys, glob
import subprocess
import time

def common():
    runfrom = os.path.abspath(os.curdir)
    jaluino_root = runfrom
    jallib_root = os.path.join(jaluino_root,"3rdparty","jallib_svn")
    jaluino_bin = os.path.join(jaluino_root,"bin")
    return {'RUNFROM'       : runfrom,
            'JALUINO_ROOT'  : jaluino_root,
            'JALLIB_ROOT'   : jallib_root,
            'JALUINO_BIN'   : jaluino_bin,
           }

def nix():
    common_env = common()
    # Determine where python is installed
    try:
        p = subprocess.Popen(["which","python"],stdout=subprocess.PIPE,
                                                stderr=subprocess.STDOUT,
                                                shell=False)
        out = p.stdout.read()
        p.communicate()
        python_exec = out.strip()
    except OSError,e:
        print >> sys.stderr, "Unable to find python, not installed...\nError: %s" % e
        time.sleep(3)
        sys.exit(255)

    # Determine where Editra is installed
    # env > 3rdparty > winreg
    # let a chance to be defined in env
    editra_src = "0"
    if os.environ.get("EDITRA_EXEC"):
        editra_exec = os.environ['EDITRA_EXEC']
    else:
        editra_exec = os.path.join(common_env['JALUINO_ROOT'],"3rdparty","Editra","Editra")
        if not os.path.exists(editra_exec):
            try:
                p = subprocess.Popen(["which","Editra"],stdout=subprocess.PIPE,
                                                        stderr=subprocess.STDOUT,
                                                        shell=False)
                out = p.stdout.read()
                p.communicate()
                editra_exec = out.strip()

            except OSError,e:
                # not installed, maybe in 3rdparty ?
                    print >> sys.stderr, "Unable to find Editra, neither installed, nor found in \"3rdparty/Editra\"\nError: %s" % e
                    time.sleep(3)
                    sys.exit(255)

    nix_env = {'EDITRA_EXEC'         : editra_exec,
               'PYTHON_EXEC'         : python_exec,
               'EDITRA_SRC'          : editra_src,
               'PATH'                : common_env['JALUINO_BIN'] + ":" + os.environ.get("PATH",""),
               'JALLIB_REPOS'        : os.path.join(common_env['JALUINO_ROOT'],"lib") + ":" + os.path.join(common_env['JALLIB_ROOT'],"include"),
               'PYTHONPATH'          : os.path.join(common_env['JALLIB_ROOT'],"tools") + ":" + os.environ.get("PYTHONPATH",""),
               'JALUINO_LAUNCH_FILE' : "jaluino_svn_launch.xml",
               'JALUINO_WRAPPER'     : os.path.join(common_env['JALUINO_BIN'],"jaluino_svn"),
              }

    # Editra configuration directories
    nix_env['EDITRA_CACHE'] = os.path.join(os.environ['HOME'],".Editra","cache")
    nix_env['EDITRA_PLUGINS'] = os.path.join(os.environ['HOME'],".Editra","plugins")

    nix_env.update(common_env)
    return nix_env

def osx():
    nix_env = nix()
    # override some values specific to OSX
    nix_env['EDITRA_CACHE'] = os.path.join(os.environ['HOME'],"Library","Application Support","Editra","cache")
    nix_env['EDITRA_PLUGINS'] = os.path.join(os.environ['HOME'],"Library","Application Support","Editra","plugins")
    return nix_env

def win():
    import _winreg as winreg
    common_env = common()
    # Determine where python is installed
    try:
        python_exec = winreg.QueryValue(winreg.HKEY_LOCAL_MACHINE,r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Python.exe")
    except OSError,e:
        print >> sys.stderr, "Unable to find python, not installed...\nError: %s" % e
        time.sleep(3)
        sys.exit(255)

    # Determine where Editra is installed
    # env > 3rdparty > winreg
    # let a chance to be defined in env
    editra_src = "0"
    if os.environ.get("EDITRA_EXEC"):
        editra_exec = os.environ['EDITRA_EXEC']
    else:
        editra_exec = os.path.join(common_env['JALUINO_ROOT'],"3rdparty","Editra","Editra.pyw")
        if not os.path.exists(editra_exec):
            try:
                editra_exec = winreg.QueryValue(winreg.HKEY_LOCAL_MACHINE,r"SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\Editra.exe")
            except OSError,e:
                # not installed, maybe in 3rdparty ?
                    print >> sys.stderr, "Unable to find Editra, neither installed, nor found in \"3rdparty/Editra\"...\nError: %s" % e
                    time.sleep(3)
                    sys.exit(255)
        else:
            editra_src = "1"


    win_env = {'EDITRA_EXEC'         : editra_exec,
               'PYTHON_EXEC'         : python_exec,
               'EDITRA_SRC'          : editra_src,
               'PATH'                : common_env['JALUINO_BIN'] + ";" + os.environ.get("PATH",""),
               'JALLIB_REPOS'        : os.path.join(common_env['JALUINO_ROOT'],"lib") + ";" + os.path.join(common_env['JALLIB_ROOT'],"include"),
               'PYTHONPATH'          : os.path.join(common_env['JALLIB_ROOT'],"tools") + ";" + os.environ.get("PYTHONPATH",""),
               'JALUINO_LAUNCH_FILE' : "jaluino_svn_launch_win.xml",
               'JALUINO_WRAPPER'     : os.path.join(common_env['JALUINO_BIN'],"jaluino_svn.bat"),
              }

    # Editra configuration directories
    win_env['EDITRA_CACHE'] = os.path.join(os.environ['APPDATA'],"Editra","cache")
    win_env['EDITRA_PLUGINS'] = os.path.join(os.environ['APPDATA'],"Editra","plugins")

    win_env.update(common_env)
    return win_env

def get_env():
    if sys.platform.startswith("win"):
        return win()
    elif sys.platform.startswith("darwin"):
        return osx()
    else:
        return nix()
        

def launch():
    env = get_env()
    globalenv = dict(os.environ)
    globalenv.update(env)
    print "Jaluinoide env:" % env
    for k,v in env.items():
        print "    %s : %s" % (k,v)
    # since we're using sources, we need to specify interpreter
    cmd = [env["EDITRA_EXEC"]]
    if int(env['EDITRA_SRC']):
        cmd = [env["PYTHON_EXEC"],env["EDITRA_EXEC"]]
    else:
        cmd = [env["EDITRA_EXEC"]]

    print "Running %s" % cmd
    p = subprocess.Popen(cmd,env=globalenv,shell=False)
    p.wait()

def install():
    # TODO: check if already installed
    #  - check dates
    #  - and/or put a hidden ".installed" directory
    # For now, not a big deal, as files are small and not numerous

    env = get_env()
    # check one Editra directory, to see if it already ran
    if not os.path.exists(env['EDITRA_CACHE']): 
        print "It seems Editra has never run before, can't install"
        return

    cachefiles = glob.glob(os.path.join("ide","conf","*"))
    pluginfiles = glob.glob(os.path.join("ide","plugins","*.egg"))
    
    for cfilen in cachefiles:
        print "Installing conf '%s'" % cfilen
        destn = os.path.join(env['EDITRA_CACHE'],os.path.basename(cfilen))
        content = file(cfilen,"rb").read()
        file(destn,"wb").write(content)

    for pfilen in pluginfiles:
        print "Installing plugin '%s'" % pfilen
        destn = os.path.join(env['EDITRA_PLUGINS'],os.path.basename(pfilen))
        content = file(pfilen,"rb").read()
        file(destn,"wb").write(content)
    
    
def prepare():
    env = get_env()
    globalenv = dict(os.environ)
    globalenv.update(env)

    wrapper = env['JALUINO_WRAPPER']
    cachedir = env['EDITRA_CACHE']
    pickfile = os.path.join(env['EDITRA_CACHE'],"jaluino_api.pick")
    if not os.path.exists(pickfile):
        print "Generating complete API..."
        filelistpath = os.path.join(env['EDITRA_CACHE'],"jalfile.list")
        filelist = file(filelistpath,"w")
        list = subprocess.Popen(["%s" % wrapper,"list"],stdout=filelist,env=globalenv,cwd=env['JALUINO_BIN'])
        list.wait()
        p = subprocess.Popen(["%s" % wrapper,"api","-k","-l","%s" % filelistpath,"-o","%s" % pickfile],env=globalenv,cwd=env['JALUINO_BIN'])
        p.wait()
    else:
        print "Found complete API file '%s'" % pickfile



if __name__ == "__main__":
    install()
    prepare()
    launch()


