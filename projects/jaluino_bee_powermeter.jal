-- Title: Powermeter with Jaluino Bee.
-- Author: Sebastien Lelong, Copyright (c) 2011, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4o
--
-- This file is part of jaluino (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Some electrical counter device has a flashing LED giving information
-- about current consumption. This program uses a phototransistor connected on RA1,
-- and detect these flashes, using interrupts. Each flash increments a counter.
-- Using Realtime clock & calendar peripheral, it triggers some alarm events
-- on regular basis, and send flash count through serial. This allows to collect
-- flash count each minute, for instance.
-- .
-- Also added DHT11 sensor...
-- Also added LDR light sensor...
--
-- Available pins:
-- (-) not available by default
-- (X) used by program
-- (^) pull-up
-- MSSP2 involved pins are mentioned for convenience
--
--                             _____  _____
--          |-|          MCLR |1   |_|   28| RB7/RP10     | |
--       NTC|X|   RA0/AN0/RP0 |2         27| RB6/RP9      | |
--      INT1|X|   RA1/AN1/RP1 |3    P    26| RB5/RP8      | |
--          | |   RA2/AN2/Vr- |4    I    25| RB4/RP7      | |
--     DHT11|X|   RA3/AN3/Vr+ |5    C    24| RB3/AN9/RP6  | |               SDO2
--          |-|       VDDCORE |6    1    23| RB2/AN8/RP5  | |               SDI2
--SCK2 LIGHT|X|   RA5/AN4/RP2 |7    8    22^ RB1/AN10/RP4 | |                SS2
--          |-|           Vss |8    F    21^ RB0/AN12/RP3 | |                SS2
--          |-|           RA7 |9    2    20| Vdd          |-|
--          |-|           RA6 |10   7    19| Vss2         |-|
--          |-|           RC0 |11   J    18| RC7/RX1/RP18 |X|Serial
--          |-|           RC1 |12   5    17| RC6/TX1/RP17 |X|Serial
--          |-| RC2/AN11/RP13 |13   3    16| RC5          |-|
--          |-|          Vusb |14        15| RC4          |-|
--                             ------------
--


-- chip setup
include jaluino_bee

-- enable watchdog, it must be cleared within ~8s
-- before PIC gets reset
-- /!\ only set when using programmer, not bootloader
;pragma target WDT  enabled
;pragma target WDTPS P2K
pragma target WDT  enabled
pragma target WDTPS P2K

include delay
include print

onboard_led_direction = output
onboard_led =  on
delay_1s(1)
onboard_led = off
delay_1s(1)

-- map INT1 on RA1 (which is remappable pin RP1)
pps_control_lock(false)
PPS_MAP_INT1 = RP1
pps_control_lock(true)


const SERIAL_HW_BAUDRATE = 9600
include serial_hardware
serial_hw_init()

alias xbee_carrier is serial_hw_data
const byte XBEE_PAYLOAD_SIZE = 50
include xbee_api
xbee_init()

-- Forge request sent to Coordinator on PC
var xbee_address64 xbee_dest
xbee_dest.msb = 0x0013a200
xbee_dest.lsb = 0x40301109
var word xbee_net = 0xfffe
xbee_req.addr64 = xbee_dest
xbee_req.network = xbee_net
xbee_req.api_id = XBEE_ZB_TX_REQUEST
xbee_req.frame_id = 1
xbee_req.broadcast_radius = 0
xbee_req.option = 0

const byte STR_FLASH[] = "!Flash: "
const byte STR_TEMP[] = "!Temperature: "
const byte STR_ROUGH_TEMP[] = "!RoughTemperature: "
const byte STR_HUM[] = "!Humidity: "
const byte STR_LIGHT[] = "!Light: "
const byte STR_WELCOME[] = "Power Meter\0"
const byte STR_DATETIME[] = "?datetime "
const byte STR_OK[] = "!OK"


alias pin_dht11_direction is pin_A3_direction
alias pin_dht11 is pin_A3
include temperature_humidity_dht11

include rtcc_hw

-- RTC can be calibrated, 32KHz Xtal must be measured
-- in order to determine the deviation. This is specific to 
-- the crystal itself. We're assuming no deviation.
rtc_calibrate(0)

-- set up interrupts
INTCON3_INT1IE = on -- allow interrupt from changing state on INT1
INTCON3_INT1IF = off -- flush flag of interrupt from INT1
INTCON2_INTEDG1 = 0 -- setting up interrupt INT1 from changing state 1->0
                    -- this corresponds to no-light -> light
-- Set interrupts so we can react when alarm is ringing
PIE3_RTCCIE = enabled
-- allow interrupts
INTCON_GIE = on
INTCON_PEIE = on

var byte year
var byte month
var byte day
var byte hour
var byte minute
var byte second

var byte _trash -- used to ignore returned values

var word flash_count
var word light = 0
var word ntc_temp = 0
var byte ntc_temp_part1 = 0
var byte ntc_temp_part2 = 0
var word max_light = 0
var bit do_send_data = false


-- Configure ADC
const byte ADC_NVREF = ADC_NO_EXT_VREF
const word ADC_RSOURCE = 2_000
const bit ADC_HIGH_RESOLUTION = high
include adc
adc_init()
set_analog_pin(4) -- RA5/AN*4* : light sensor
set_analog_pin(0) -- RA0/AN*0* : temp/ntc sensor


procedure int_isr() is
   pragma interrupt
   
   -- INT1 interrupt: there was a flash
   if INTCON3_INT1IF then
      onboard_led = !onboard_led
      flash_count = flash_count + 1
      -- debounce trigger to avoid counting this flash more than once
      delay_1ms(10)
      INTCON3_INT1IF = off -- flushing flag
   end if
   
   -- RTC interrupts: need to send flash count value
   if PIR3_RTCCIF then
      do_send_data = true
      PIR3_RTCCIF = false -- clear flag
   end if

end procedure

-- convert string numbers to BCD numbers
-- (eg. "11" becomes 0x11, in HEX)
procedure str2num(byte out num) is
   var byte char
   char = xbee_res_payload
   num = (char - "0") << 4
   char = xbee_res_payload
   num = num + (char - "0")
end procedure

-- request datetime to PC, though serial. PC must reply
-- the following format: "YY-MM-DD hh:mm:ss"
procedure set_datetime() is
   -- read response until we get a "RX" one.
   xbee_receive()
   var byte _trash
   ;-- re-read payload
   ;xbee_res.payload_idx = 0
   -- year
   str2num(year)
   _trash = xbee_res_payload -- sep "-"
   -- month
   str2num(month)
   _trash = xbee_res_payload -- sep "-"
   -- day
   str2num(day)
   _trash = xbee_res_payload -- space
   -- hour
   str2num(hour)
   _trash = xbee_res_payload -- sep ":"
   -- minute
   str2num(minute)
   _trash = xbee_res_payload -- sep ":"
   --second
   str2num(second)

   -- got everything needed, let's set date & time
   rtc_set_date(year,month,day)           -- YY/MM/DD )
   rtc_set_time(hour,minute,minute)           -- HH:MM:SS ) BCD format
   rtc_set_alarm_time(hour,minute,second)     -- HH:MM:SS )
   rtc_set_alarm_interval(RTC_ALARM_INTERVAL_MINUTE)
   rtc_set_alarm_repeat(255)
   rtc_set_alarm(ON)                      -- enable alarm
   rtc_set_clock(ON)                      -- enable RTCC module

   -- ACK time setting
   print_string(xbee_req_payload,STR_OK)
   print_crlf(xbee_req_payload)
   xbee_send()
end procedure

procedure ntc_read() is
   -- y = 437x + 26900	
   -- gives something like 226609 which means 22.6609 °C
   var word a = adc_read_high_res(0)
   ntc_temp = (437 * a) + 26900
   -- int part
   ntc_temp_part1 = byte(ntc_temp / 10000)
   -- dec part
   ntc_temp_part2 = byte((ntc_temp/100) - (ntc_temp_part1*100))
end procedure

-- send welcome request
print_string(xbee_req_payload,STR_WELCOME)
print_crlf(xbee_req_payload)
-- send request
xbee_send()
-- request current datetime
print_string(xbee_req_payload,STR_DATETIME)
print_crlf(xbee_req_payload)
xbee_send()
set_datetime()

-- main loop
forever loop

   if do_send_data then
   
      do_send_data = false
      rtc_get_date(year,month,day)
      rtc_get_time(hour,minute,second)
      print_string(xbee_req_payload,STR_FLASH)
      print_byte_hex(xbee_req_payload,year)
      xbee_req_payload = "-"
      print_byte_hex(xbee_req_payload,month)
      xbee_req_payload = "-"
      print_byte_hex(xbee_req_payload,day)
      xbee_req_payload = " "
      print_byte_hex(xbee_req_payload,hour)
      xbee_req_payload = ":"
      print_byte_hex(xbee_req_payload,minute)
      xbee_req_payload = ":"
      print_byte_hex(xbee_req_payload,second)
      xbee_req_payload = "|"
      print_word_dec(xbee_req_payload,flash_count)
      print_crlf(xbee_req_payload)
      -- reset flash counter
      flash_count = 0
      -- send timestamp and flash count request
      xbee_send()
      
      -- get temp/hum value
      if(dht11_read() == DHT11_OK) then
         -- send DHT request
         print_string(xbee_req_payload,STR_HUM)
         print_byte_dec(xbee_req_payload,dht11_humidity)
         print_crlf(xbee_req_payload)
         xbee_send()
         print_string(xbee_req_payload,STR_ROUGH_TEMP)
         print_byte_dec(xbee_req_payload,dht11_temperature)
         print_crlf(xbee_req_payload)
         xbee_send()
      end if

      -- send highest light value found during delay
      print_string(xbee_req_payload,STR_LIGHT)
      print_word_dec(xbee_req_payload,max_light)
      print_crlf(xbee_req_payload)
      -- reset max value
      max_light = 0
      -- send light request
      xbee_send()
      
      -- read accurate temperature value
      ntc_read()
      print_string(xbee_req_payload,STR_TEMP)
      print_byte_dec(xbee_req_payload,ntc_temp_part1)
      xbee_req_payload = "."
      print_byte_dec(xbee_req_payload,ntc_temp_part2)
      print_crlf(xbee_req_payload)
      -- send NTC request
      xbee_send()
      
   end if
   
   -- light: we're trying to capture higher values during one minute
   -- that is, the max value from 60 readings
   light = adc_read_high_res(4)
   if light >= max_light then
      max_light = light
   end if
   
   onboard_led = on
   delay_1ms(20)
   onboard_led = off
   delay_1s(5)
   -- we're alive, so clear watchdog
   asm clrwdt
   
end loop

