-- Title: CPC 6128 keyboard USB interface
-- Author: Sebastien Lelong, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by:
-- Compiler: >=2.4j
-- Revision: $Revision: 373 $
-- 
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
-- 
-- Description: USB keyboard interface for Amswtrad CPC 6128 keyboard
-- This is basically a nice way to use demux and mux to read a keyboard
-- matrix.
-- 
-- Sources:
--  * https://sites.google.com/site/raspberrycpc6128/keyboard
--  * http://wiki.t-o-f.info/Arduino/ExempleMutliplexeurDentr%C3%A9esNum%C3%A9riques74HC165
--  * http://wiki.t-o-f.info/Arduino/ExempleD%C3%A9multiplexeurNum%C3%A9rique74HC595
-- 
-- Notes: 
-- PIC <=> 74HC595 demux:
--  * RA0 <-> (11) SRCLK / CLOCK
--  * RA1 <-> (12) RCLK / LATCH
--  * RA2 <-> (14) SER / DATA
-- 
-- 74HC165 mux:
--  * RB7 <-> (1) SH / LATCH
--  * RB6 <-> (2) CLK / CLOCK
--  * RB3 <-> (9) QH / DATA
--

include jaluino_bee
include delay
include print

onboard_led_direction = output

onboard_led = high
delay_1s(1)
onboard_led = low

-- ok, now setup serial
const serial_hw_baudrate = 9_600

include serial_hardware
serial_hw_init()


include usb_keyboard

-- set all inputs to digital
enable_digital_io()

-- pin mapping
-- for 74HC595 demux
--  * RA0 <-> (11) SRCLK / CLOCK
--  * RA1 <-> (12) RCLK / LATCH
--  * RA2 <-> (14) SER / DATA
alias demux595_clock is pin_a0  
alias demux595_latch is pin_a1
alias demux595_data is pin_a2
alias demux595_clock_direction is pin_a0_direction 
alias demux595_latch_direction is pin_a1_direction 
alias demux595_data_direction is pin_a2_direction 
-- for 74HC165 mux
--  * RB7 <-> (1) SH / LATCH
--  * RB6 <-> (2) CLK / CLOCK
--  * RB3 <-> (9) QH / DATA
alias mux165_latch is pin_b7 
alias mux165_clock is pin_b6 
alias mux165_data is pin_b3 
alias mux165_latch_direction is pin_b7_direction 
alias mux165_clock_direction is pin_b6_direction 
alias mux165_data_direction is pin_b3_direction 
-- extra pins for 9th and 10th bits
alias mux165_data_9 is pin_b4 
alias mux165_data_10 is pin_b5 
alias mux165_data_9_direction is pin_b4_direction 
alias mux165_data_10_direction is pin_b5_direction 


procedure cpc6128() is
   -- demux
   demux595_data_direction = output
   demux595_latch_direction = output
   demux595_clock_direction = output
   -- mux
   mux165_latch_direction = output
   mux165_clock_direction = output
   mux165_data_direction = input
   -- extra inputs to read mux 9th and 10th bits
   mux165_data_9_direction = input
   mux165_data_10_direction = input
   -- init state
   mux165_clock = low
   mux165_latch = low
end procedure


-- X1 desc                bckspace -/_  0/)   8/*  6/^  4/$  1/!                    LeftArrow UpArrow
const byte KEYCODES_X1[] = {0x2A, 0x2D, 0x20, 0x25,0x23,0x21,0x1E,USB_KEYBOARD_KEY_NONE,0x50,0x52}
-- X2 desc                  [/{   =/+  9/(    7/&  5/%  3/#  2/@                     LeftAlt RightArrow
const byte KEYCODES_X2[] = {0x2F, 0x2E, 0x26, 0x24,0x22,0x20,0x1F,USB_KEYBOARD_KEY_NONE,0xE2,0x4F}
-- X3 desc                  RETURN  \/|                                                                              ESC                                        DownArrow
const byte KEYCODES_X3[] = {0x28,  0x31,USB_KEYBOARD_KEY_O,USB_KEYBOARD_KEY_U,USB_KEYBOARD_KEY_R,USB_KEYBOARD_KEY_E,0x29,USB_KEYBOARD_KEY_NONE,USB_KEYBOARD_KEY_F7,0x51}
-- X4 desc                  ]/} 
const byte KEYCODES_X4[] = {0x30,USB_KEYBOARD_KEY_P,USB_KEYBOARD_KEY_I,USB_KEYBOARD_KEY_Y,USB_KEYBOARD_KEY_T,USB_KEYBOARD_KEY_W,USB_KEYBOARD_KEY_Q,USB_KEYBOARD_KEY_NONE,USB_KEYBOARD_KEY_F8,USB_KEYBOARD_KEY_F9}
-- X5 desc                  KP4  ;/+                                                                              TAB  (empty)
const byte KEYCODES_X5[] = {0x5C,0x33,USB_KEYBOARD_KEY_L,USB_KEYBOARD_KEY_H,USB_KEYBOARD_KEY_G,USB_KEYBOARD_KEY_S,0x2B,USB_KEYBOARD_KEY_NONE,USB_KEYBOARD_KEY_F5,USB_KEYBOARD_KEY_F6}
-- X6 desc               LeftShift :
const byte KEYCODES_X6[] = {0xE1,0xCB,USB_KEYBOARD_KEY_K,USB_KEYBOARD_KEY_J,USB_KEYBOARD_KEY_F,USB_KEYBOARD_KEY_D,USB_KEYBOARD_KEY_A,USB_KEYBOARD_KEY_NONE,USB_KEYBOARD_KEY_F1,USB_KEYBOARD_KEY_F3}
-- X7 desc                   `    /                                                                                capslock                                       enter
const byte KEYCODES_X7[] = {0x35, 0x38, USB_KEYBOARD_KEY_M,USB_KEYBOARD_KEY_N,USB_KEYBOARD_KEY_B,USB_KEYBOARD_KEY_C,0x39,USB_KEYBOARD_KEY_NONE,USB_KEYBOARD_KEY_F2,0x58}
-- X8 desc               LeftCtrl  .     ,   space                                                          suppr                     . (keypad)
const byte KEYCODES_X8[] = {0xE0, 0x37, 0x36, 0x2C, USB_KEYBOARD_KEY_V,USB_KEYBOARD_KEY_,USB_KEYBOARD_KEY_Z,0x4C,USB_KEYBOARD_KEY_F10,0x63}


-- shift out byte's bit through 595 demux
procedure shift_out(byte in data) is
var byte i = 0
   for 8 using i loop
      var byte val = (data & (1 << (7 - i)))
      demux595_data = !!val -- convert to true/false
      demux595_clock = high
      demux595_clock = low
   end loop            
end procedure

-- shift in byte's bits from 165 mux
function shift_in() return word is
   var word value = 0
   var byte i = 0
   for 8 using i loop
      value = value | (mux165_data << i)
      mux165_clock = high
      mux165_clock = low
   end loop

   value = value | (word(mux165_data_9) << 8)
   value = value | (word(mux165_data_10) << 9)
   return value
end function

procedure send_usb_key(byte in data_write, word in data_read) is
   ; A
   ;>00001000
   ;<0000000001000000
   ; B
   ;>00100000
   ;<0000000001000000
   var byte idx = 0
   while data_read != 0 loop
      data_read = data_read >> 1
      idx = idx + 1
   end loop
   -- one more when left
   idx = idx - 1
   var byte code = 0x00
   case data_write of
      1  : block code = KEYCODES_X1[idx] end block
      2  : block code = KEYCODES_X2[idx] end block
      4  : block code = KEYCODES_X3[idx] end block
      8  : block code = KEYCODES_X4[idx] end block
      16 : block code = KEYCODES_X5[idx] end block
      32 : block code = KEYCODES_X6[idx] end block
      64 : block code = KEYCODES_X7[idx] end block
      128: block code = KEYCODES_X8[idx] end block
      otherwise         code = 0xFF
   end case
   ush_keyboard_send_key( 0x00, code)
   ush_keyboard_send_key( 0x00, USB_KEYBOARD_KEY_NONE)
   serial_hw_data = "["
   print_word_hex(serial_hw_data,code)
   serial_hw_data = "]"
end procedure

-- init
usb_keyboard_init()
cpc6128()

var byte data_write = 0xFF
var word data_read = 0
var word prevkey = data_read
forever loop

   -- poll the usb flush function on a regular base, in order to 
   -- serve the USB requests
   usb_keyboard_flush()
   
   -- check if USB device has been configured by the HOST
   if usb_is_configured()  then

      -- demux: send a byte, set pins to high/low
      -- 595 demux, output bits
      -- take the latchPin low
      demux595_latch = low
      -- shift out the bits for the SECOND 74HC595:
      shift_out(data_write)
      -- take the latch pin high so the LEDs update:
      demux595_latch = high

      -- mux: read inputs, high/low
      mux165_latch = high
      data_read = shift_in()
      mux165_latch = low

      -- pause before next value:
      ;delay_1s(5)
      if data_read != prevkey then
         prevkey = data_read
            print_crlf(serial_hw_data)
            serial_hw_data = ">"
            print_byte_bin(serial_hw_data,data_write)
            serial_hw_data = " "
            serial_hw_data = "<"
            print_word_bin(serial_hw_data,data_read)
            serial_hw_data = " "
            serial_hw_data = "("
            print_word_hex(serial_hw_data,data_read)
            serial_hw_data = ")"
            onboard_led = ! onboard_led
         if data_read != 0 then
            send_usb_key(data_write,data_read)
         end if
      end if

      if data_write == 0x80 then
         data_write = 0x01
      else
         data_write = data_write << 1
      end if

   end if

end loop

