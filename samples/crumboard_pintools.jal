-- Title: Show how to access pins by number, controlling their direction and levels, using pintools.jal library
-- Author: SÃ©bastien Lelong, Copyright (c) 2008..2010, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4l
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this sample show how to use pintools.jal library. pintools.jal allows to
-- access pins using a number. This number is first defined in kind of associative array.
-- Using pintools.jal, you don't have to use pin's name.
-- This sample uses LEDs and push-buttons:
--  - when switch SW1 is pushed, pin_A0 (LED1) switches between high and low level
--  - when switch SW2 is pushed, pin_C2 (LED2) switches between output and input direction
--    (if output, LED shines)
-- that is, we're controlling LED1 with its level, and LED2 with its direction
--
-- Shield: crumboard
--

include jaluino_medium
include delay

-- describe hardware setup by declaring plugged jumpers
const bit CRUMBOARD_LED1_JP1 = on	-- we've put a jumper in JP1 (use LED D1)
const bit CRUMBOARD_LED2_JP2 = on	-- and also on JP2 (use LED D2)
const bit CRUMBOARD_SW1_JP3  = on	-- we've put a jumper in JP3 (use switch SW1)
const bit CRUMBOARD_SW2_JP4  = on	-- and also on JP2 (use switch SW2)
-- now we can include crumboard library
include crumboard_shield
crumboard_init()

-- we here define our associate array, a mapping between 
-- pin names and an arbitrary index. crumboard_shield.jal says:
--  - LED1 is on pin_A0: its index will be 0
--  - LED2 is on pin_C2: its index will be 1
-- Array map's elements go y two: [port,number], so
-- this translates to (size = 2 * 2 pins):
-- index:                        0      1
const byte pintools_map[4] = {"A",0, "C",2}
include pintools

-- everything is setup, ready to be used
crumboard_led1 = off
crumboard_led2 = off

-- blink a little at first
for 5 loop
   crumboard_led1 = on
   crumboard_led2 = on
   delay_1ms(200)

   crumboard_led1 = off
   crumboard_led2 = off
   delay_1ms(200)
end loop

-- we first turn on LEDs
-- before evaluate inputs
crumboard_led1 = on
crumboard_led2 = on

var bit _led1_level = crumboard_led1
var bit _led2_direction = crumboard_led2_direction
forever loop
   -- "read" switch SW1
   if crumboard_switch1 == high then
      -- here we set pin #0, which is pin_A0, to high or low level
	  -- according to previous level
	  _led1_level = ! _led1_level
	  pintools_set_level(0,_led1_level)
   end if

   -- same for SW2
   if crumboard_switch2 == high then
	  -- here we set pin #1, which is pin_C2, to input or output direction
	  -- according to previous direction
	  _led2_direction = ! _led2_direction
	  pintools_set_direction(1,_led2_direction)
   end if

   -- debounce push buttons
   delay_1ms(200)
end loop

--
