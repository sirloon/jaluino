-- Title: Sample PING via ENC28j60
-- Author: Matthew Schinkel - borntechi.com, copyright (c) 2011, all rights reserved.
-- Adapted-by: Sebastien Lelong, for Jaluino board
-- Compiler: >=2.4o
--
-- This file is part of jallib (http://jallib.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: This sample is for ethernet network communication using
--              ENC28j60. Sends/receives ICMP PING.
-- Connect:
--  - B7 (RX) to TX on serial module
--  - B6 (TX) to RX on serial module
--  - B5 to DO pin on ENC28J60 module
--  - B4 to CLK pin on ENC28J60 module
--  - C7 to DI pin on ENC28J60 module
--  - A2 to RST pin on ENC28J60 module
--  - A5 to CS pin on ENC28J60 module
--
-- Sources:
--
--

include jaluino_bee
include print
include delay

include pps
-- PPS module writes are protected, we need to first unlock it
pps_control_lock(false)
-- TX2 is an output function: we assign a function to a RP pin
-- Remappable pin RP9 can be accessed through the following register
PPS_MAP_RP9 = PPS_TX2CK2
-- RX2 is an input function: we assign a RP pin the a function register
PPS_MAP_RX2DT2 = RP10
-- PPS configuration is done, we can lock again
pps_control_lock(true)

-- ok, now setup serial
const serial_hw2_baudrate = 9600
include serial_hardware2
serial_hw2_init()
alias serial_data is serial_hw2_data

const byte STR_WELCOME[] = "-- ENC28J60 Ping sample --"
print_string(serial_data,STR_WELCOME)
print_crlf(serial_data)
print_crlf(serial_data)

onboard_led_direction = output
onboard_led = on


---------------------
-- SETUP ENC28J60  --
---------------------
-- ethernet module's pin definition
alias enc_reset is pin_a2
alias enc_reset_direction is pin_a2_direction
enc_reset_direction = output
enc_reset = low -- keep module in reset state until it's ready
-- chip select pin
alias enc_cs is pin_a5
alias enc_cs_direction is pin_a5_direction
enc_cs_direction = output
enc_cs = 1
include spi_master_hw
-- define spi inputs/outputs
pin_sdi_direction = input    -- spi input
pin_sdo_direction = output   -- spi output
pin_sck_direction = output   -- spi clock
spi_init(SPI_MODE_00,SPI_RATE_FOSC_4) -- init spi, choose mode and speed
-- set constants for enc28j60
const byte ENC_LOCAL_MAC[6] = {0x00,0x13,0xD4,0xC6,0x53,0x16} -- MAC address of PIC
const ENC_USE_INTERRUPT_PIN = FALSE -- TRUE -> not tested yet
const ENC_ARRAY_SIZE = 100 -- max 1500. Please adjust this, I was able to use 600
const ENC_ALWAYS_SET_SPI_MODE = TRUE
-- setup debug lib
alias debug_data is serial_data
const bit DEBUG_MASTER_ENABLE = FALSE    -- enables debugging
include debug
-- everything's ready, we can include ENC28J60 library
include enc28j60


-- enable ethernet module
enc_reset = high
delay_1s(2) -- wait a while so module gets ready
enc_init()



-- change clockout pin freq. good communication test if you have a scope
enc_set_clkout_freq(ENC_8_333)
enc_set_clkout_freq(ENC_3_125)
--
-- print chip revision. another communcation test for those who don't
-- have a scope. My chip prints: 6
const byte STR_CHIPREV[] = "Chip rev: "
print_string(serial_data,STR_CHIPREV)
print_byte_dec(serial_data,enc_read_revision())
print_crlf(serial_data)

-- Setup Networking
-- choose network protocols to use
--
-- choose network protocols to use. You must put TRUE
-- for each protocol you use.
-- If you set FALSE or don't a define constant, don't include the file.
const NETWORK_USE_IP = TRUE
--
const NETWORK_USE_ARP = TRUE -- suggested for ethernet, not slip
const NETWORK_USE_ARP_CALLBACKS = TRUE
--
const NETWORK_USE_ICMP = TRUE -- required for ping only
const NETWORK_USE_ICMP_CALLBACKS = TRUE
--
const NETWORK_USE_UDP = FALSE -- udp can transfer data
const NETWORK_USE_UDP_CALLBACKS = FALSE
--
const NETWORK_USE_TCP = FALSE -- under development. requires ARP
const NETWORK_USE_TCP_CALLBACKS = FALSE
--
const byte network_local_ip[4] = {192,168,0,60}  -- IP address of PIC
const byte network_gateway_ip[4] = {192,168,0,1} -- IP address of gateway/router
--
-- set network layer
const NETWORK_LINK_LAYER = NETWORK_ETHERNET
const NETWORK_LINK_DEVICE = NETWORK_ENC28J60
--
const NETWORK_USE_TIMER = 1 -- timer not implemented yet, but will be needed.
--
-- include networking main files
include networking
include ethernet_mac
include ip_header
include arp

const ICMP_ECHO_DATA_LENGTH = 32 -- size of data to send with PING
include icmp

--MAIN PROGRAM-----------------------------------------------------------------------------------------------------

-- CALLBACK PROCEDURES --

--------------------------------------------------------------------------------
-- called when we get a arp reply from an external source
--------------------------------------------------------------------------------
procedure arp_reply_callback() is
    -- print a message
    var byte get_arp[] = "ARP Reply Recieved!"
    print_string(serial_data,get_arp)
    print_crlf(serial_data)
end procedure
--------------------------------------------------------------------------------
-- called when we get a arp request
--------------------------------------------------------------------------------
procedure arp_request_callback() is
    -- print a message
    print_crlf(serial_data)
    var byte get_ping[] = "Arp Request Recieved, Sending Reply"
    print_string(serial_data,get_ping)
    print_crlf(serial_data)
end procedure

--------------------------------------------------------------------------------
-- called when we get a ping reply (after we sent a ping out somewhere)
--------------------------------------------------------------------------------
procedure icmp_echo_reply_callback() is
    -- print a message
    var byte get_ping[] = "Ping Reply Recieved!"
    print_string(serial_data,get_ping)
    print_crlf(serial_data)
end procedure

var byte ping_google = 0 -- each 5 ping request received, ping google
--------------------------------------------------------------------------------
-- called when we get a ping from an external source
--------------------------------------------------------------------------------
procedure icmp_echo_callback() is
   onboard_led = !onboard_led -- toggle led
   var byte get_ping[] = "Ping Request received!"
   print_string(serial_data,get_ping)
   print_crlf(serial_data)
   if ping_google == 5 then
      -- print a message
      print_crlf(serial_data)
      var byte sending_ping[] = "Sending ARP + Ping!"
      print_string(serial_data,sending_ping)
      print_crlf(serial_data)

      ;network_set_remote_ip(192,168,0,10)  -- ip address of local network PC
      network_set_remote_ip(74,125,115,106)  -- ping google's ip address
      arp_get_mac(1,1_000)                   -- get mac address for ethernet layer

      icmp_send_echo()                       -- send an icmp echo (ping) request
      ping_google = 0
   end if
   ping_google = ping_google + 1
end procedure

-- MAIN PROGRAM LOOP --

-- get the MAC of the gateway we will be talking to
network_set_remote_ip(192,168,0,1) -- ip address of your PC or router
;network_set_remote_ip(192,168,2,2)
-- print message
var byte sending_arp[] = "sending arp request, waiting for reply..."
print_string(serial_data,sending_arp)
print_crlf(serial_data)
--
if NETWORK_LINK_LAYER == NETWORK_ETHERNET then
   arp_get_mac(5,1_000)

   -- Get all the packets before we continue
   -- This is extra, it will just allow the next message to be
   -- printed last -> "You are connected! Your Router or PC mac address is:"
   for 1000 loop
      -- poll to see if there are network packets available
      network_poll()
   end loop

end if
--
if arp_reply_received == TRUE then
   print_crlf(serial_data)
   var byte get_arp[] = "You are connected! Your Router or PC mac address is:"
   print_string(serial_data,get_arp)
   print_crlf(serial_data)
   --
   print_byte_hex(serial_data,network_remote_mac[0])
   serial_data = "-"
   print_byte_hex(serial_data,network_remote_mac[1])
   serial_data = "-"
   print_byte_hex(serial_data,network_remote_mac[2])
   serial_data = "-"
   print_byte_hex(serial_data,network_remote_mac[3])
   serial_data = "-"
   print_byte_hex(serial_data,network_remote_mac[4])
   serial_data = "-"
   print_byte_hex(serial_data,network_remote_mac[5])
   print_crlf(serial_data)
   print_crlf(serial_data)
else
   print_crlf(serial_data)
   var byte arp_error[] = "ERROR: ARP did not get a reply. Is your network connected correctly?"
   print_string(serial_data,arp_error)
   print_crlf(serial_data)
end if

;-- uncomment if you are using WIN XP slip connection
;if NETWORK_LINK_LAYER == NETWORK_SLIP Then
;   -- wait for "CLIENT" from windows slip connection (yes, i got lazy)
;   while !serial_data_available loop
;   end loop
;
;   -- reply with "CLIENTSERVER" to initiate connection
;   const byte str1[] = "CLIENTSERVER"   -- define a string
;   print_string(serial_data, str1)   -- send via serial port
;end if

-- main loop
var word counter = 40000
var word packet_size
forever loop

   -- poll to see if there are network packets available
   network_poll()

end loop

