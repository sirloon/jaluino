-- Title: Minix FS/OS demo for Jaluino Bee, based on 18F27J53 
-- Author: SÃ©bastien Lelong, Copyright (c) 2011, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4o
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: Minix demo. Explore Minix filesystem and perform actions
-- using some sort of *nix-like commands:
--    * ls   : list directories or file's details
--    * cd   : change directory
--    * fsck : show super-block details
--    * cat  : print file content
--    * dcat : "dev" cat, showing address details and content when changing
--    * $?   : print last errors
--
--

-- we plan to use SD-Card so tell the main library to 
-- configure remappable pins and create appropriate aliases
const byte ENABLE_MSSP2_SDCARD = 1

include jaluino_bee
include print
include delay
include jascii
include strings

onboard_led_direction = output
onboard_led = off

const serial_hw_baudrate = 115_200
include serial_hardware
serial_hw_init()

alias minix_start_read is sd_start_read
alias minix_stop_read is sd_stop_read
alias minix_start_write is sd_start_write
alias minix_stop_write is sd_stop_write
alias minix_data_byte is sd_data_byte -- get|put byte

-- 512 bytes buffer
alias minix_read_sector is sd_read_sector
alias minix_write_sector is sd_write_sector
alias minix_sector_buffer is sd_sector_buffer
-- how do we know when we reach end of storage sector ?
alias MINIX_STORAGE_SECTOR_SIZE is SD_BYTE_PER_SECTOR

-- how to interact with Minix OS
alias minix_print_carrier is serial_hw_data

include minixfs

const byte WELCOME[] = "Welcome to Minix OS :)"
const byte PROMPT[] = "minix> "
const byte COMMAND_NOT_FOUND[] = "Command not found"
print_crlf(serial_hw_data)
print_string(serial_hw_data,WELCOME)
print_crlf(serial_hw_data)

-- some sort of "mount"
minix_init(true)

procedure reboot() is
   asm goto 0x00
end procedure

-- Minix commands for REPL impl.
const byte MINIX_FSCK_CMD[] = "fsck\0"
const byte MINIX_DOLLARQ_CMD[] = "$?\0"
const byte MINIX_CAT_CMD[] = "cat\0"
const byte MINIX_DCAT_CMD[] = "dcat\0"
const byte MINIX_CD_CMD[] = "cd\0"
const byte MINIX_LS_CMD[] = "ls\0"
const byte MINIX_OPEN_READ_CMD[] = "openr\0"
const byte MINIX_OPEN_WRITE_CMD[] = "openw\0"
const byte MINIX_CLOSE_CMD[] = "close\0"
const byte MINIX_READ_CMD[] = "read\0"
const byte MINIX_WRITE_CMD[] = "write\0"
const byte MINIX_SEEK_CMD[] = "seek\0"
const byte MINIX_BLOCK_CMD[] = "block\0"
const byte MINIX_RAWREAD_CMD[] = "rread\0"
const byte MINIX_REBOOT_CMD[] = "reboot\0"
   
var byte command[16]
var byte filename[MINIX_MAX_FILENANE_LEN]
var byte char
var byte i
forever loop

   -- print prompt :)
   print_string(serial_hw_data,PROMPT)
   
   -- init to no command and no filename
   command[0] = 0
   filename[0] = 0

   -- read command
   i = 0
   while true  loop
      char = serial_hw_data
      -- echo
      serial_hw_data = char
      if char == ASCII_LF | char == ASCII_CR | char == ASCII_SP then
         command[i] = ASCII_NULL -- NULL terminated string
         exit loop
      end if
      command[i] = char
      i = i + 1
   end loop

   -- read filename if necessary
   if char == ASCII_SP then
      i = 0
      while true  loop
         char = serial_hw_data
         -- echo
         serial_hw_data = char
         if char == ASCII_LF | char == ASCII_CR then
            filename[i] = ASCII_NULL -- NULL terminated string
            exit loop
         end if
         filename[i] = char
         i = i + 1
      end loop
   end if

   if char == ASCII_LF | char == ASCII_CR | char == ASCII_SP then
      print_crlf(serial_hw_data)
   end if

   if command[0] != ASCII_NULL then
      if strcmp(command,MINIX_FSCK_CMD) then
         minix_dev_print_super_block()
      elsif strcmp(command,MINIX_DOLLARQ_CMD) then
         minix_dev_print_error()
      elsif strcmp(command,MINIX_CD_CMD) then
         minix_cd(filename)
      elsif strcmp(command,MINIX_CAT_CMD) then
         minix_cat(filename)
      elsif strcmp(command,MINIX_DCAT_CMD) then
         minix_dev_cat(filename)
      elsif strcmp(command,MINIX_LS_CMD) then
         minix_ls(filename)
      elsif strcmp(command,MINIX_OPEN_READ_CMD) then
         minix_open(filename,MINIX_READ_ONLY)
      elsif strcmp(command,MINIX_OPEN_WRITE_CMD) then
         minix_open(filename,MINIX_WRITE_ONLY)
      elsif strcmp(command,MINIX_CLOSE_CMD) then
         minix_close()
      elsif strcmp(command,MINIX_READ_CMD) then
         if filename[0] != 0 then
            for atoi(filename) loop
               serial_hw_data = minix_read()
            end loop
         else
            serial_hw_data = minix_read()
         end if
      elsif strcmp(command,MINIX_WRITE_CMD) then
         for count(filename) using i loop
            if filename[i] == 0 then
               exit loop
            end if
            minix_write(filename[i])
         end loop
      elsif strcmp(command,MINIX_SEEK_CMD) then
         minix_seek(atoi(filename))
      elsif strcmp(command,MINIX_BLOCK_CMD) then
         minix_open_block(atoi(filename))
      elsif strcmp(command,MINIX_RAWREAD_CMD) then
         if filename[0] != 0 then
            for atoi(filename) loop
               serial_hw_data = minix_data_byte
            end loop
         else
            serial_hw_data = minix_data_byte
         end if
      elsif strcmp(command,MINIX_REBOOT_CMD) then
         reboot()
      else
         print_string(serial_hw_data,COMMAND_NOT_FOUND)
         print_crlf(serial_hw_data)
      end if
   end if

end loop

