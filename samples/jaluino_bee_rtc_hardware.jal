-- Title: RTCC hardware demo/test for Jaluino Bee, 18F27J53 based
-- Author: SÃ©bastien Lelong, Copyright (c) 2008..2009, all rights reserved.
-- Adapted-by:
-- Compiler: 2.4n
--
-- This file is part of jaluino  (http://jaluino.googlecode.com)
-- Released under the BSD license (http://www.opensource.org/licenses/bsd-license.php)
--
-- Description: this program sets an alarm using RTC hardware peripheral, and blinks onboard
-- when alarm is active.
--

include 18f27j53
pragma target clock 48_000_000   -- oscillator frequency
-- magical statements
pragma target PLLDIV	   P4
pragma target CPUDIV	   P1
pragma target PLLEN  P1          -- PLL via fuse turned off
pragma target OSC	   HS_PLL
pragma target WDT  disabled      -- no watchdog
OSCTUNE_PLLEN = on               -- PLL via OSCTUNE enabled


-- declare secondary oscillator on T1OSI/T1OSO pins
pragma target RTCOSC T1OSC
pragma target SOSCSEL HS_CP

enable_digital_io()

-- Set interrupts so we can react when alarm is ringing
PIE3_RTCCIE = enabled
INTCON_GIE = enabled
INTCON_PEIE = true

include delay

-- Assuming LED is enable on hardware (jumper)
alias onboard_led_direction is pin_c2_direction
alias onboard_led is pin_c2
onboard_led_direction =  output
onboard_led = low

include rtcc_hw

-- initialize realtime clock
rtc_init()

-- RTC can be calibrated, 32KHz Xtal must be measured
-- in order to determine the deviation. This is specific to 
-- the crystal itself. We're assuming no deviation.
rtc_calibrate(0)

-- let's say we're April 23rd 2011, it's 10:56:12 o'clock.
-- Alarm is set at 10:56:17
var  byte*3  datenow = 0x230411                       -- actual date, DDMMYY
var  byte*3  timenow = 0x125610                       -- actual time, SSMMHH
var  byte*3  alarmtime = 0x175610                     -- actual alarmtime, SSMMHH

rtc_set_yymmdd_bcd(datenow)                     -- )
rtc_set_hhmmss_bcd(timenow)                     -- ) initial values
rtc_set_alarm_hhmmss_bcd(alarmtime)             -- )

rtc_set_alarm(true)
;;rtc_set_alarm_period(RTC_ALARM_PERIOD_SECOND)
;;rtc_set_alarm_repeat(10)

-- ISR: will be triggered at each RTC event
procedure school_is_over() is
   pragma interrupt
   
   -- only reply to RTC interrupts
   if ! PIR3_RTCCIF then
      return
   end if

   if ALRMCFG_ALRMEN == false then
      onboard_led = high
      delay_1ms(20)
      onboard_led = low
      delay_1ms(20)
   end if

   PIR3_RTCCIF = false -- clear flag

end procedure


forever loop
   asm nop
end loop


